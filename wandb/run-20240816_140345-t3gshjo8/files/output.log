2024-08-16 14:03:50,076 [Worker 0] Is distributed: False
2024-08-16 14:03:50,076 [Process: 0] Starting training
2024-08-16 14:03:50,077 [Process: 0] EPOCH 1:
2024-08-16 14:03:50,079 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2288, 0.2102, 0.2691,  ..., 0.3613, 0.3844, 0.3568],
         [0.2360, 0.3695, 0.2254,  ..., 0.2129, 0.2029, 0.2303],
         [0.3065, 0.2102, 0.2067,  ..., 0.2129, 0.2029, 0.2065],
         [0.2288, 0.2102, 0.2988,  ..., 0.2129, 0.2099, 0.2065]],
        [[0.2659, 0.2759, 0.2439,  ..., 0.2364, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2683,  ..., 0.2658, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2439,  ..., 0.2615, 0.3221, 0.2638],
         [0.2447, 0.2414, 0.2439,  ..., 0.2364, 0.2260, 0.2454]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:03:52,636 [Process: 0] Synchronize training processes
2024-08-16 14:03:52,637 [Process: 0] Evaluating...
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.3621, 0.3425, 0.3286,  ..., 0.2795, 0.1454, 0.3096],
         [0.1388, 0.1584, 0.1096,  ..., 0.1586, 0.1599, 0.2771],
         [0.1979, 0.3215, 0.2388,  ..., 0.4034, 0.5831, 0.2035],
         [0.3011, 0.1776, 0.3230,  ..., 0.1586, 0.1115, 0.2098]],
        [[0.2317, 0.2487, 0.1523,  ..., 0.1594, 0.2165, 0.2500],
         [0.2317, 0.2487, 0.1745,  ..., 0.4778, 0.2165, 0.2500],
         [0.2317, 0.2540, 0.4981,  ..., 0.1594, 0.3505, 0.2500],
         [0.3048, 0.2487, 0.1750,  ..., 0.2034, 0.2165, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
2024-08-16 14:03:57,687 [Process: 0] EPOCH 2:
2024-08-16 14:03:57,693 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:03:59,643 [Process: 0] Synchronize training processes
2024-08-16 14:03:59,643 [Process: 0] Evaluating...
2024-08-16 14:03:59,645 [Process: 0] EPOCH 3:
2024-08-16 14:03:59,647 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.3347, 0.3032, 0.2939,  ..., 0.3156, 0.2424, 0.3153],
         [0.2513, 0.1898, 0.2689,  ..., 0.1970, 0.2424, 0.1795],
         [0.1979, 0.2221, 0.2091,  ..., 0.1830, 0.2728, 0.2633],
         [0.2161, 0.2848, 0.2281,  ..., 0.3045, 0.2424, 0.2419]],
        [[0.2285, 0.2254, 0.2085,  ..., 0.2185, 0.2396, 0.2652],
         [0.3146, 0.3125, 0.2719,  ..., 0.2435, 0.2811, 0.2929],
         [0.2285, 0.2254, 0.2085,  ..., 0.2185, 0.2396, 0.2209],
         [0.2285, 0.2368, 0.3111,  ..., 0.3196, 0.2396, 0.2209]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.7630, 0.1818, 0.2261,  ..., 0.2500, 0.2006, 0.4205],
         [0.0797, 0.2291, 0.2574,  ..., 0.2500, 0.3089, 0.1932],
         [0.0787, 0.4073, 0.2904,  ..., 0.2500, 0.2900, 0.1932],
         [0.0787, 0.1818, 0.2261,  ..., 0.2500, 0.2006, 0.1932]],
        [[0.2191, 0.2710, 0.2204,  ..., 0.2159, 0.2532, 0.2402],
         [0.3199, 0.0407, 0.1244,  ..., 0.1880, 0.2023, 0.4017],
         [0.1681, 0.2291, 0.1244,  ..., 0.1790, 0.2023, 0.1790],
         [0.2930, 0.4593, 0.5309,  ..., 0.4171, 0.3422, 0.1790]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:01,558 [Process: 0] Synchronize training processes
2024-08-16 14:04:01,558 [Process: 0] Evaluating...
2024-08-16 14:04:01,560 [Process: 0] EPOCH 4:
2024-08-16 14:04:01,562 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2428, 0.3026, 0.2193,  ..., 0.2287, 0.2446, 0.2277],
         [0.2794, 0.2661, 0.2971,  ..., 0.2287, 0.2662, 0.3169],
         [0.2389, 0.2119, 0.2193,  ..., 0.2355, 0.2446, 0.2277],
         [0.2389, 0.2194, 0.2642,  ..., 0.3072, 0.2446, 0.2277]],
        [[0.2725, 0.2171, 0.2571,  ..., 0.3181, 0.2775, 0.2214],
         [0.1899, 0.2792, 0.2860,  ..., 0.2759, 0.2018, 0.2214],
         [0.1899, 0.2171, 0.2010,  ..., 0.2030, 0.2189, 0.2214],
         [0.3476, 0.2866, 0.2559,  ..., 0.2030, 0.3018, 0.3358]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.6234, 0.4157, 0.2088,  ..., 0.3335, 0.2229, 0.4571],
         [0.1361, 0.1738, 0.2106,  ..., 0.2222, 0.3068, 0.2293],
         [0.0774, 0.2367, 0.3281,  ..., 0.2222, 0.2474, 0.1276],
         [0.1631, 0.1738, 0.2525,  ..., 0.2222, 0.2229, 0.1860]],
        [[0.2108, 0.2243, 0.2124,  ..., 0.1733, 0.1693, 0.2155],
         [0.3127, 0.2625, 0.2864,  ..., 0.1733, 0.2252, 0.2155],
         [0.1917, 0.2889, 0.2889,  ..., 0.4800, 0.4361, 0.3536],
         [0.2849, 0.2243, 0.2124,  ..., 0.1733, 0.1693, 0.2155]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:03,461 [Process: 0] Synchronize training processes
2024-08-16 14:04:03,462 [Process: 0] Evaluating...
2024-08-16 14:04:03,464 [Process: 0] EPOCH 5:
2024-08-16 14:04:03,466 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2250, 0.2079, 0.2362,  ..., 0.2293, 0.2228, 0.2148],
         [0.2626, 0.2497, 0.2408,  ..., 0.3120, 0.2611, 0.3555],
         [0.2250, 0.1779, 0.2475,  ..., 0.2293, 0.2292, 0.2148],
         [0.2875, 0.3645, 0.2754,  ..., 0.2293, 0.2868, 0.2148]],
        [[0.2369, 0.2199, 0.2614,  ..., 0.2383, 0.2481, 0.3402],
         [0.2777, 0.2928, 0.2356,  ..., 0.2852, 0.2456, 0.2670],
         [0.2139, 0.2199, 0.2218,  ..., 0.2383, 0.2134, 0.1952],
         [0.2715, 0.2674, 0.2811,  ..., 0.2383, 0.2929, 0.1976]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1753, 0.1460, 0.5719,  ..., 0.3173, 0.6083, 0.4065],
         [0.1753, 0.1460, 0.0891,  ..., 0.2034, 0.1178, 0.1808],
         [0.4740, 0.5620, 0.0804,  ..., 0.3200, 0.1178, 0.2660],
         [0.1753, 0.1460, 0.2587,  ..., 0.1593, 0.1560, 0.1467]],
        [[0.1720, 0.1249, 0.1809,  ..., 0.2500, 0.2200, 0.1579],
         [0.1704, 0.6252, 0.4572,  ..., 0.2500, 0.2200, 0.1579],
         [0.1704, 0.1249, 0.1809,  ..., 0.2500, 0.2200, 0.1579],
         [0.4873, 0.1249, 0.1809,  ..., 0.2500, 0.3399, 0.5263]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 5:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:05,375 [Process: 0] Synchronize training processes
2024-08-16 14:04:05,376 [Process: 0] Evaluating...
2024-08-16 14:04:05,378 [Process: 0] EPOCH 6:
2024-08-16 14:04:05,380 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2475, 0.2135, 0.2582,  ..., 0.2162, 0.2256, 0.2482],
         [0.2366, 0.3229, 0.2543,  ..., 0.3035, 0.2643, 0.2555],
         [0.2165, 0.2135, 0.2415,  ..., 0.2140, 0.2845, 0.2482],
         [0.2994, 0.2500, 0.2460,  ..., 0.2662, 0.2256, 0.2482]],
        [[0.2370, 0.2155, 0.2385,  ..., 0.3052, 0.2894, 0.2729],
         [0.2714, 0.3456, 0.2385,  ..., 0.2333, 0.2379, 0.2146],
         [0.2370, 0.2155, 0.2385,  ..., 0.2305, 0.2363, 0.2146],
         [0.2546, 0.2234, 0.2844,  ..., 0.2310, 0.2363, 0.2979]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2890, 0.2181, 0.2993,  ..., 0.4186, 0.2500, 0.4366],
         [0.2045, 0.2117, 0.1601,  ..., 0.2197, 0.2500, 0.2152],
         [0.3020, 0.3584, 0.3805,  ..., 0.1764, 0.2500, 0.1741],
         [0.2045, 0.2117, 0.1601,  ..., 0.1853, 0.2500, 0.1741]],
        [[0.0903, 0.2500, 0.1617,  ..., 0.2903, 0.2116, 0.2126],
         [0.5127, 0.2500, 0.4465,  ..., 0.1168, 0.3445, 0.3262],
         [0.1604, 0.2500, 0.1617,  ..., 0.1168, 0.2053, 0.1906],
         [0.2366, 0.2500, 0.2302,  ..., 0.4760, 0.2385, 0.2707]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 6:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:07,293 [Process: 0] Synchronize training processes
2024-08-16 14:04:07,293 [Process: 0] Evaluating...
2024-08-16 14:04:07,295 [Process: 0] EPOCH 7:
2024-08-16 14:04:07,297 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2603, 0.2737, 0.2832,  ..., 0.2633, 0.2367, 0.3170],
         [0.3084, 0.2522, 0.1699,  ..., 0.1920, 0.1886, 0.2198],
         [0.1710, 0.2312, 0.1836,  ..., 0.1877, 0.1886, 0.2081],
         [0.2604, 0.2430, 0.3633,  ..., 0.3570, 0.3861, 0.2551]],
        [[0.2630, 0.2493, 0.2815,  ..., 0.2711, 0.2603, 0.2485],
         [0.2457, 0.2493, 0.2241,  ..., 0.2297, 0.2320, 0.2485],
         [0.2457, 0.2493, 0.2241,  ..., 0.2297, 0.2320, 0.2485],
         [0.2457, 0.2520, 0.2704,  ..., 0.2694, 0.2757, 0.2546]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2500, 0.1327, 0.1859,  ..., 0.6158, 0.3042, 0.1124],
         [0.2500, 0.0865, 0.1859,  ..., 0.0656, 0.1873, 0.1124],
         [0.2500, 0.0865, 0.1859,  ..., 0.0623, 0.1873, 0.5577],
         [0.2500, 0.6944, 0.4422,  ..., 0.2564, 0.3212, 0.2175]],
        [[0.1895, 0.3761, 0.1081,  ..., 0.1855, 0.1901, 0.1518],
         [0.2887, 0.2150, 0.4645,  ..., 0.4435, 0.2870, 0.1748],
         [0.3975, 0.2660, 0.3192,  ..., 0.1855, 0.2878, 0.5216],
         [0.1243, 0.1429, 0.1081,  ..., 0.1855, 0.2352, 0.1518]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 7:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:09,283 [Process: 0] Synchronize training processes
2024-08-16 14:04:09,284 [Process: 0] Evaluating...
2024-08-16 14:04:09,286 [Process: 0] EPOCH 8:
2024-08-16 14:04:09,288 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2271, 0.2003, 0.2344,  ..., 0.2234, 0.2387, 0.2313],
         [0.2647, 0.3154, 0.3349,  ..., 0.3299, 0.2395, 0.2469],
         [0.2271, 0.2184, 0.1979,  ..., 0.2234, 0.2119, 0.2833],
         [0.2810, 0.2659, 0.2328,  ..., 0.2234, 0.3100, 0.2385]],
        [[0.2496, 0.2391, 0.2735,  ..., 0.2354, 0.2370, 0.2644],
         [0.2513, 0.2391, 0.2130,  ..., 0.2900, 0.2673, 0.2504],
         [0.2496, 0.2391, 0.2130,  ..., 0.2354, 0.2059, 0.2426],
         [0.2496, 0.2827, 0.3005,  ..., 0.2392, 0.2898, 0.2426]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2266, 0.2003, 0.1325,  ..., 0.2034, 0.1553, 0.2006],
         [0.2367, 0.1640, 0.3959,  ..., 0.3354, 0.2351, 0.0454],
         [0.2641, 0.1581, 0.2493,  ..., 0.2333, 0.2090, 0.6700],
         [0.2726, 0.4776, 0.2224,  ..., 0.2279, 0.4006, 0.0840]],
        [[0.2730, 0.3117, 0.3138,  ..., 0.2935, 0.3855, 0.2500],
         [0.3566, 0.2479, 0.1957,  ..., 0.1841, 0.1735, 0.2500],
         [0.2066, 0.2545, 0.1766,  ..., 0.3135, 0.1521, 0.2500],
         [0.1637, 0.1859, 0.3140,  ..., 0.2090, 0.2890, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 8:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:11,197 [Process: 0] Synchronize training processes
2024-08-16 14:04:11,197 [Process: 0] Evaluating...
2024-08-16 14:04:11,199 [Process: 0] EPOCH 9:
2024-08-16 14:04:11,201 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2079, 0.2455, 0.2316,  ..., 0.2308, 0.2289, 0.2640],
         [0.2344, 0.2636, 0.2316,  ..., 0.2073, 0.3125, 0.1859],
         [0.2164, 0.2455, 0.2316,  ..., 0.2110, 0.2289, 0.2085],
         [0.3413, 0.2455, 0.3053,  ..., 0.3509, 0.2297, 0.3417]],
        [[0.3496, 0.2352, 0.2312,  ..., 0.3056, 0.2445, 0.2426],
         [0.2424, 0.2630, 0.2340,  ..., 0.2154, 0.2219, 0.2426],
         [0.1787, 0.2053, 0.2312,  ..., 0.2154, 0.2219, 0.2426],
         [0.2293, 0.2964, 0.3035,  ..., 0.2637, 0.3118, 0.2722]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2500, 0.2456, 0.1448,  ..., 0.2500, 0.1314, 0.2472],
         [0.2500, 0.2456, 0.1448,  ..., 0.2500, 0.1314, 0.2583],
         [0.2500, 0.2632, 0.5657,  ..., 0.2500, 0.6058, 0.2472],
         [0.2500, 0.2456, 0.1448,  ..., 0.2500, 0.1314, 0.2472]],
        [[0.2425, 0.1749, 0.3065,  ..., 0.1461, 0.2500, 0.1927],
         [0.2237, 0.4147, 0.2004,  ..., 0.1760, 0.2500, 0.1809],
         [0.3491, 0.1749, 0.2064,  ..., 0.3879, 0.2500, 0.1194],
         [0.1848, 0.2355, 0.2867,  ..., 0.2900, 0.2500, 0.5071]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 9:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-16 14:04:13,113 [Process: 0] Synchronize training processes
2024-08-16 14:04:13,114 [Process: 0] Evaluating...
2024-08-16 14:04:13,115 [Process: 0] EPOCH 10:
2024-08-16 14:04:13,117 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2724, 0.2347, 0.2625,  ..., 0.2614, 0.3109, 0.2711],
         [0.2367, 0.3181, 0.2140,  ..., 0.2706, 0.2247, 0.2211],
         [0.2133, 0.2159, 0.2140,  ..., 0.2010, 0.2247, 0.2211],
         [0.2776, 0.2313, 0.3095,  ..., 0.2670, 0.2396, 0.2868]],
        [[0.2137, 0.2258, 0.2722,  ..., 0.2284, 0.2500, 0.2214],
         [0.2670, 0.2258, 0.2160,  ..., 0.2284, 0.2500, 0.2530],
         [0.2137, 0.2258, 0.2160,  ..., 0.2284, 0.2500, 0.2214],
         [0.3056, 0.3226, 0.2957,  ..., 0.3148, 0.2500, 0.3043]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2350, 0.1131, 0.2259,  ..., 0.1143, 0.1038, 0.1058],
         [0.2350, 0.4414, 0.3224,  ..., 0.6059, 0.2905, 0.2231],
         [0.2350, 0.3192, 0.2259,  ..., 0.0587, 0.1146, 0.1304],
         [0.2949, 0.1263, 0.2259,  ..., 0.2210, 0.4910, 0.5407]],
        [[0.5465, 0.3833, 0.5444,  ..., 0.4969, 0.2391, 0.5171],
         [0.0886, 0.2056, 0.1519,  ..., 0.1070, 0.1000, 0.1610],
         [0.2117, 0.2056, 0.1519,  ..., 0.1070, 0.5726, 0.1610],
         [0.1531, 0.2056, 0.1519,  ..., 0.2892, 0.0883, 0.1610]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 10:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
2024-08-16 14:04:15,031 [Process: 0] Synchronize training processes
2024-08-16 14:04:15,031 [Process: 0] Evaluating...
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2259, 0.2301, 0.2459,  ..., 0.2295, 0.2441, 0.2367],
         [0.2547, 0.2301, 0.2147,  ..., 0.2249, 0.2441, 0.2373],
         [0.2103, 0.2301, 0.2105,  ..., 0.2172, 0.2441, 0.2367],
         [0.3092, 0.3097, 0.3289,  ..., 0.3284, 0.2678, 0.2893]],
        [[0.2277, 0.2340, 0.2725,  ..., 0.2392, 0.2823, 0.2095],
         [0.2751, 0.2762, 0.2101,  ..., 0.2580, 0.2054, 0.2157],
         [0.2277, 0.2284, 0.1908,  ..., 0.2392, 0.2054, 0.1911],
         [0.2695, 0.2613, 0.3266,  ..., 0.2635, 0.3069, 0.3837]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2522, 0.2972, 0.1628,  ..., 0.1875, 0.4232, 0.3405],
         [0.3005, 0.1802, 0.2982,  ..., 0.4271, 0.1725, 0.3008],
         [0.1178, 0.1245, 0.1584,  ..., 0.1875, 0.1285, 0.1071],
         [0.3295, 0.3981, 0.3807,  ..., 0.1979, 0.2759, 0.2516]],
        [[0.1654, 0.2342, 0.2695,  ..., 0.2146, 0.2500, 0.2500],
         [0.2157, 0.2342, 0.2874,  ..., 0.2146, 0.2500, 0.2500],
         [0.4535, 0.2975, 0.2215,  ..., 0.3562, 0.2500, 0.2500],
         [0.1654, 0.2342, 0.2215,  ..., 0.2146, 0.2500, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...