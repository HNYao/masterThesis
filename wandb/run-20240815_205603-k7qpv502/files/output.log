2024-08-15 20:56:07,755 [Worker 0] Is distributed: False
2024-08-15 20:56:07,756 [Process: 0] Starting training
2024-08-15 20:56:07,756 [Process: 0] EPOCH 1:
2024-08-15 20:56:07,758 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
2024-08-15 20:56:10,078 [Process: 0] Synchronize training processes
2024-08-15 20:56:10,078 [Process: 0] Evaluating...
2024-08-15 20:56:10,080 [Process: 0] EPOCH 2:
2024-08-15 20:56:10,082 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
2024-08-15 20:56:11,797 [Process: 0] Synchronize training processes
2024-08-15 20:56:11,797 [Process: 0] Evaluating...
2024-08-15 20:56:11,799 [Process: 0] EPOCH 3:
2024-08-15 20:56:11,800 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
2024-08-15 20:56:13,507 [Process: 0] Synchronize training processes
2024-08-15 20:56:13,507 [Process: 0] Evaluating...
2024-08-15 20:56:13,508 [Process: 0] EPOCH 4:
2024-08-15 20:56:13,510 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
Traceback (most recent call last):
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 37, in <module>
    main()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 367, in _run_hydra
    run_and_report(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 368, in <lambda>
    lambda: hydra.run(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/hydra.py", line 97, in run
    ret = run_job(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 31, in main
    trainer.train()
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 339, in train
    avg_loss = self.train_one_epoch(epoch)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 198, in train_one_epoch
    outputs = self.model(batch=batch)["affordance"].squeeze(1)
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/models/GeoL.py", line 42, in forward
    print(texts)
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/wandb/sdk/lib/redirect.py", line 640, in write
    self._old_write(data)
KeyboardInterrupt