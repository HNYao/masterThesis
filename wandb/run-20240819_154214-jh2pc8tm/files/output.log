[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2028, 0.3592, 0.1945,  ..., 0.1251, 0.4740, 0.1963],
         [0.3724, 0.2667, 0.1582,  ..., 0.1394, 0.1753, 0.4111],
         [0.2220, 0.1966, 0.4491,  ..., 0.5495, 0.1753, 0.1963],
         [0.2028, 0.1774, 0.1982,  ..., 0.1860, 0.1753, 0.1963]],
        [[0.3022, 0.1658, 0.5318,  ..., 0.2739, 0.2172, 0.1463],
         [0.1963, 0.4420, 0.0963,  ..., 0.3728, 0.2172, 0.2151],
         [0.1502, 0.2115, 0.0963,  ..., 0.1767, 0.3485, 0.1463],
         [0.3513, 0.1806, 0.2755,  ..., 0.1767, 0.2172, 0.4923]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2746, 0.2630, 0.2620,  ..., 0.2844, 0.2401, 0.0927],
         [0.2667, 0.2895, 0.2630,  ..., 0.2794, 0.1857, 0.1152],
         [0.2294, 0.2122, 0.1926,  ..., 0.1961, 0.1734, 0.1125],
         [0.2294, 0.2353, 0.2824,  ..., 0.2401, 0.4008, 0.6796]],
        [[0.2538, 0.1891, 0.2791,  ..., 0.2808, 0.3056, 0.2792],
         [0.2603, 0.2379, 0.2513,  ..., 0.2847, 0.2254, 0.2800],
         [0.2036, 0.2116, 0.2024,  ..., 0.1743, 0.1926, 0.2204],
         [0.2823, 0.3613, 0.2672,  ..., 0.2602, 0.2764, 0.2204]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
(2, 512, 3)
2024-08-19 15:42:17,523 [Worker 0] Is distributed: False
2024-08-19 15:42:17,523 [Process: 0] Starting training
2024-08-19 15:42:17,523 [Process: 0] EPOCH 1:
2024-08-19 15:42:17,526 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:18,961 [Process: 0] Synchronize training processes
2024-08-19 15:42:18,961 [Process: 0] Evaluating...
2024-08-19 15:42:19,886 [Process: 0] EPOCH 2:
2024-08-19 15:42:19,890 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:20,738 [Process: 0] Synchronize training processes
2024-08-19 15:42:20,738 [Process: 0] Evaluating...
2024-08-19 15:42:20,740 [Process: 0] EPOCH 3:
2024-08-19 15:42:20,742 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:21,586 [Process: 0] Synchronize training processes
2024-08-19 15:42:21,587 [Process: 0] Evaluating...
2024-08-19 15:42:21,588 [Process: 0] EPOCH 4:
2024-08-19 15:42:21,590 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2753, 0.0716, 0.2551,  ..., 0.2746, 0.2608, 0.2700],
         [0.2582, 0.0716, 0.2614,  ..., 0.2580, 0.2602, 0.2524],
         [0.1980, 0.7853, 0.2037,  ..., 0.1997, 0.2140, 0.2159],
         [0.2685, 0.0716, 0.2799,  ..., 0.2676, 0.2649, 0.2618]],
        [[0.2673, 0.2896, 0.2706,  ..., 0.2601, 0.2186, 0.2660],
         [0.2411, 0.2537, 0.2774,  ..., 0.2537, 0.2186, 0.2512],
         [0.2162, 0.1920, 0.1833,  ..., 0.1990, 0.3442, 0.2052],
         [0.2753, 0.2646, 0.2687,  ..., 0.2872, 0.2186, 0.2777]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2847, 0.2679, 0.2810,  ..., 0.2697, 0.2842, 0.2669],
         [0.2493, 0.2533, 0.2606,  ..., 0.2639, 0.2545, 0.2539],
         [0.1876, 0.1865, 0.1825,  ..., 0.1946, 0.1971, 0.1962],
         [0.2783, 0.2923, 0.2758,  ..., 0.2718, 0.2643, 0.2831]],
        [[0.2660, 0.2721, 0.2610,  ..., 0.2744, 0.1935, 0.2087],
         [0.2490, 0.2508, 0.2540,  ..., 0.2556, 0.1935, 0.2316],
         [0.2141, 0.1910, 0.2096,  ..., 0.1904, 0.4196, 0.3358],
         [0.2709, 0.2861, 0.2754,  ..., 0.2796, 0.1935, 0.2239]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2651, 0.0912, 0.2690,  ..., 0.2677, 0.2737, 0.2657],
         [0.2474, 0.0912, 0.2377,  ..., 0.2494, 0.2359, 0.2501],
         [0.2105, 0.7263, 0.2184,  ..., 0.2076, 0.2163, 0.2108],
         [0.2769, 0.0912, 0.2749,  ..., 0.2753, 0.2741, 0.2734]],
        [[0.0364, 0.2710, 0.2701,  ..., 0.2668, 0.2692, 0.2698],
         [0.0364, 0.2457, 0.2448,  ..., 0.2600, 0.2588, 0.2552],
         [0.8909, 0.2080, 0.2087,  ..., 0.2001, 0.2041, 0.2053],
         [0.0364, 0.2753, 0.2764,  ..., 0.2731, 0.2679, 0.2697]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
2024-08-19 15:42:22,435 [Process: 0] Synchronize training processes
2024-08-19 15:42:22,436 [Process: 0] Evaluating...
2024-08-19 15:42:22,437 [Process: 0] EPOCH 5:
2024-08-19 15:42:22,439 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:23,298 [Process: 0] Synchronize training processes
2024-08-19 15:42:23,298 [Process: 0] Evaluating...
2024-08-19 15:42:23,300 [Process: 0] EPOCH 6:
2024-08-19 15:42:23,301 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2860, 0.2858, 0.2776,  ..., 0.2700, 0.2938, 0.2703],
         [0.2496, 0.2469, 0.2447,  ..., 0.2466, 0.2515, 0.2554],
         [0.1799, 0.1836, 0.1977,  ..., 0.1998, 0.1817, 0.1984],
         [0.2845, 0.2837, 0.2799,  ..., 0.2836, 0.2730, 0.2759]],
        [[0.2676, 0.2887, 0.2807,  ..., 0.2719, 0.2826, 0.0893],
         [0.2512, 0.2440, 0.2392,  ..., 0.2592, 0.2451, 0.0893],
         [0.2092, 0.1910, 0.1936,  ..., 0.1882, 0.1996, 0.7320],
         [0.2720, 0.2763, 0.2865,  ..., 0.2807, 0.2727, 0.0893]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2749, 0.2500, 0.2769,  ..., 0.2790, 0.2909, 0.2714],
         [0.2389, 0.2500, 0.2403,  ..., 0.2311, 0.2309, 0.2437],
         [0.2085, 0.2500, 0.2157,  ..., 0.2086, 0.2090, 0.2087],
         [0.2777, 0.2500, 0.2671,  ..., 0.2814, 0.2693, 0.2763]],
        [[0.1646, 0.2803, 0.2844,  ..., 0.2793, 0.2724, 0.2747],
         [0.1869, 0.2411, 0.2396,  ..., 0.2402, 0.2441, 0.2444],
         [0.4839, 0.2109, 0.2107,  ..., 0.2141, 0.2124, 0.2108],
         [0.1646, 0.2677, 0.2653,  ..., 0.2664, 0.2711, 0.2701]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2855, 0.2863, 0.2804,  ..., 0.2874, 0.2940, 0.2882],
         [0.2336, 0.2363, 0.2340,  ..., 0.2333, 0.2382, 0.2423],
         [0.2054, 0.1987, 0.2084,  ..., 0.2028, 0.1972, 0.1880],
         [0.2755, 0.2786, 0.2773,  ..., 0.2766, 0.2706, 0.2815]],
        [[0.2194, 0.2838, 0.2828,  ..., 0.2828, 0.2858, 0.1576],
         [0.2286, 0.2394, 0.2325,  ..., 0.2404, 0.2263, 0.1576],
         [0.3354, 0.2059, 0.2040,  ..., 0.1985, 0.2058, 0.5273],
         [0.2165, 0.2710, 0.2807,  ..., 0.2783, 0.2821, 0.1576]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 5:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2917, 0.2500, 0.2852,  ..., 0.2946, 0.2951, 0.2993],
         [0.2173, 0.2500, 0.2160,  ..., 0.2190, 0.2301, 0.2186],
         [0.2024, 0.2500, 0.2136,  ..., 0.2047, 0.2034, 0.2018],
         [0.2886, 0.2500, 0.2852,  ..., 0.2818, 0.2715, 0.2804]],
        [[0.1273, 0.2915, 0.2874,  ..., 0.2791, 0.2884, 0.2976],
         [0.1733, 0.2355, 0.2309,  ..., 0.2412, 0.2187, 0.2295],
         [0.5583, 0.1929, 0.2001,  ..., 0.1998, 0.2047, 0.2033],
         [0.1411, 0.2801, 0.2816,  ..., 0.2799, 0.2881, 0.2696]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2917, 0.2904, 0.2930,  ..., 0.3049, 0.2977, 0.3003],
         [0.2213, 0.2168, 0.2214,  ..., 0.2144, 0.2197, 0.2114],
         [0.2057, 0.1966, 0.2112,  ..., 0.1946, 0.1912, 0.1984],
         [0.2814, 0.2962, 0.2745,  ..., 0.2861, 0.2914, 0.2899]],
        [[0.0476, 0.3092, 0.2976,  ..., 0.2987, 0.2681, 0.1824],
         [0.0809, 0.2115, 0.2088,  ..., 0.2133, 0.2299, 0.1824],
         [0.8239, 0.2104, 0.1983,  ..., 0.2035, 0.2153, 0.4528],
         [0.0476, 0.2689, 0.2953,  ..., 0.2844, 0.2866, 0.1824]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
2024-08-19 15:42:24,153 [Process: 0] Synchronize training processes
2024-08-19 15:42:24,153 [Process: 0] Evaluating...
2024-08-19 15:42:24,155 [Process: 0] EPOCH 7:
2024-08-19 15:42:24,157 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:25,003 [Process: 0] Synchronize training processes
2024-08-19 15:42:25,003 [Process: 0] Evaluating...
2024-08-19 15:42:25,005 [Process: 0] EPOCH 8:
2024-08-19 15:42:25,007 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 6:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3002, 0.0514, 0.3197,  ..., 0.2956, 0.3072, 0.3058],
         [0.2090, 0.0514, 0.2139,  ..., 0.2169, 0.2125, 0.2154],
         [0.2090, 0.8458, 0.1934,  ..., 0.2046, 0.2125, 0.2051],
         [0.2818, 0.0514, 0.2730,  ..., 0.2829, 0.2677, 0.2737]],
        [[0.2650, 0.3009, 0.2928,  ..., 0.2051, 0.2915, 0.1565],
         [0.2427, 0.2075, 0.2234,  ..., 0.2482, 0.2187, 0.2290],
         [0.2266, 0.2075, 0.2089,  ..., 0.3234, 0.2187, 0.4376],
         [0.2657, 0.2841, 0.2749,  ..., 0.2233, 0.2711, 0.1770]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3057, 0.3172, 0.3206,  ..., 0.3154, 0.3135, 0.3147],
         [0.2055, 0.1989, 0.2005,  ..., 0.2061, 0.2150, 0.2029],
         [0.2055, 0.1989, 0.1949,  ..., 0.2061, 0.2002, 0.2029],
         [0.2833, 0.2850, 0.2840,  ..., 0.2724, 0.2712, 0.2795]],
        [[0.1388, 0.3181, 0.2983,  ..., 0.3024, 0.2718, 0.1244],
         [0.1641, 0.2066, 0.2070,  ..., 0.2055, 0.2333, 0.1244],
         [0.5583, 0.1922, 0.2070,  ..., 0.2055, 0.2099, 0.6267],
         [0.1388, 0.2831, 0.2877,  ..., 0.2866, 0.2850, 0.1244]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 7:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2977, 0.1795, 0.3279,  ..., 0.3155, 0.3352, 0.3137],
         [0.2135, 0.1795, 0.1938,  ..., 0.2002, 0.1926, 0.2039],
         [0.2135, 0.4616, 0.1898,  ..., 0.2002, 0.1926, 0.2039],
         [0.2754, 0.1795, 0.2884,  ..., 0.2842, 0.2797, 0.2785]],
        [[0.1615, 0.3156, 0.3209,  ..., 0.2258, 0.0998, 0.1815],
         [0.1836, 0.2028, 0.1984,  ..., 0.2266, 0.1331, 0.1815],
         [0.4934, 0.2028, 0.1984,  ..., 0.3210, 0.6672, 0.4555],
         [0.1615, 0.2787, 0.2823,  ..., 0.2267, 0.0998, 0.1815]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3188, 0.3326, 0.3615,  ..., 0.3288, 0.3243, 0.3259],
         [0.1945, 0.1900, 0.1787,  ..., 0.2004, 0.1984, 0.2069],
         [0.1945, 0.1889, 0.1724,  ..., 0.1868, 0.1943, 0.1843],
         [0.2921, 0.2885, 0.2874,  ..., 0.2840, 0.2830, 0.2829]],
        [[0.1157, 0.3294, 0.3394,  ..., 0.3303, 0.3033, 0.0915],
         [0.1414, 0.2019, 0.1871,  ..., 0.2054, 0.2258, 0.0915],
         [0.6271, 0.1922, 0.1816,  ..., 0.1921, 0.1927, 0.7254],
         [0.1157, 0.2765, 0.2918,  ..., 0.2722, 0.2782, 0.0915]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 8:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:25,863 [Process: 0] Synchronize training processes
2024-08-19 15:42:25,863 [Process: 0] Evaluating...
2024-08-19 15:42:25,865 [Process: 0] EPOCH 9:
2024-08-19 15:42:25,866 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:26,714 [Process: 0] Synchronize training processes
2024-08-19 15:42:26,714 [Process: 0] Evaluating...
2024-08-19 15:42:26,716 [Process: 0] EPOCH 10:
2024-08-19 15:42:26,718 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:27,592 [Process: 0] Synchronize training processes
2024-08-19 15:42:27,593 [Process: 0] Evaluating...
2024-08-19 15:42:27,594 [Process: 0] EPOCH 11:
2024-08-19 15:42:27,596 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3102, 0.2500, 0.3047,  ..., 0.3279, 0.3139, 0.3414],
         [0.2038, 0.2500, 0.2086,  ..., 0.2019, 0.2048, 0.1902],
         [0.2038, 0.2500, 0.2086,  ..., 0.1949, 0.1982, 0.1902],
         [0.2823, 0.2500, 0.2782,  ..., 0.2754, 0.2832, 0.2782]],
        [[0.0815, 0.3342, 0.3247,  ..., 0.2483, 0.1944, 0.1300],
         [0.0815, 0.1970, 0.1995,  ..., 0.2219, 0.2240, 0.1300],
         [0.7554, 0.1854, 0.1995,  ..., 0.2897, 0.3610, 0.6101],
         [0.0815, 0.2834, 0.2763,  ..., 0.2401, 0.2206, 0.1300]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3399, 0.3390, 0.3410,  ..., 0.3422, 0.3334, 0.3290],
         [0.1901, 0.1998, 0.1887,  ..., 0.1982, 0.1968, 0.1956],
         [0.1901, 0.1876, 0.1887,  ..., 0.1860, 0.1923, 0.1956],
         [0.2799, 0.2737, 0.2817,  ..., 0.2735, 0.2776, 0.2799]],
        [[0.1213, 0.3265, 0.3410,  ..., 0.3206, 0.3440, 0.1192],
         [0.1382, 0.2040, 0.1948,  ..., 0.1966, 0.1889, 0.1192],
         [0.6192, 0.2040, 0.1853,  ..., 0.1966, 0.1856, 0.6425],
         [0.1213, 0.2656, 0.2789,  ..., 0.2862, 0.2816, 0.1192]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 9:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3248, 0.2500, 0.3371,  ..., 0.3262, 0.3218, 0.3401],
         [0.2066, 0.2500, 0.2031,  ..., 0.1998, 0.1999, 0.1870],
         [0.1871, 0.2500, 0.1873,  ..., 0.1892, 0.1999, 0.1778],
         [0.2815, 0.2500, 0.2725,  ..., 0.2848, 0.2784, 0.2950]],
        [[0.0832, 0.3365, 0.3556,  ..., 0.2997, 0.1501, 0.0979],
         [0.0832, 0.2051, 0.1832,  ..., 0.2082, 0.1759, 0.1043],
         [0.7505, 0.1851, 0.1832,  ..., 0.1980, 0.5239, 0.6999],
         [0.0832, 0.2733, 0.2781,  ..., 0.2941, 0.1501, 0.0979]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3333, 0.3416, 0.3479,  ..., 0.3451, 0.3189, 0.3249],
         [0.1962, 0.1942, 0.1903,  ..., 0.1955, 0.1989, 0.1948],
         [0.1924, 0.1942, 0.1808,  ..., 0.1832, 0.1961, 0.1946],
         [0.2781, 0.2700, 0.2809,  ..., 0.2763, 0.2861, 0.2856]],
        [[0.1811, 0.3377, 0.3487,  ..., 0.3154, 0.3428, 0.1386],
         [0.1811, 0.1916, 0.1920,  ..., 0.1996, 0.1927, 0.1493],
         [0.4566, 0.1888, 0.1856,  ..., 0.1996, 0.1927, 0.5734],
         [0.1811, 0.2818, 0.2737,  ..., 0.2854, 0.2717, 0.1386]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 10:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3383, 0.2500, 0.3065,  ..., 0.3433, 0.3176, 0.3367],
         [0.1943, 0.2500, 0.2079,  ..., 0.2013, 0.2072, 0.1851],
         [0.1884, 0.2500, 0.2079,  ..., 0.1805, 0.1945, 0.1844],
         [0.2791, 0.2500, 0.2776,  ..., 0.2749, 0.2808, 0.2938]],
        [[0.0927, 0.3204, 0.3196,  ..., 0.2751, 0.1652, 0.1460],
         [0.0927, 0.2071, 0.1967,  ..., 0.2198, 0.1708, 0.1460],
         [0.7220, 0.1941, 0.1967,  ..., 0.2164, 0.4988, 0.5619],
         [0.0927, 0.2784, 0.2869,  ..., 0.2887, 0.1652, 0.1460]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
2024-08-19 15:42:28,447 [Process: 0] Synchronize training processes
2024-08-19 15:42:28,448 [Process: 0] Evaluating...
2024-08-19 15:42:29,364 [Process: 0] EPOCH 12:
2024-08-19 15:42:29,367 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3201, 0.2971, 0.3176,  ..., 0.3285, 0.3521, 0.3272],
         [0.1990, 0.2104, 0.1982,  ..., 0.1952, 0.1862, 0.1923],
         [0.1990, 0.2104, 0.1982,  ..., 0.1952, 0.1833, 0.1917],
         [0.2820, 0.2821, 0.2859,  ..., 0.2812, 0.2784, 0.2888]],
        [[0.1921, 0.3368, 0.3638,  ..., 0.3466, 0.3265, 0.1077],
         [0.1921, 0.1977, 0.1883,  ..., 0.1856, 0.1904, 0.1077],
         [0.4237, 0.1734, 0.1680,  ..., 0.1797, 0.1904, 0.6768],
         [0.1921, 0.2920, 0.2799,  ..., 0.2881, 0.2926, 0.1077]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 11:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3321, 0.2500, 0.3338,  ..., 0.3438, 0.3013, 0.3513],
         [0.1912, 0.2500, 0.2005,  ..., 0.1915, 0.2042, 0.1819],
         [0.1785, 0.2500, 0.1757,  ..., 0.1816, 0.2042, 0.1694],
         [0.2983, 0.2500, 0.2900,  ..., 0.2831, 0.2903, 0.2974]],
        [[0.0997, 0.3367, 0.3444,  ..., 0.2559, 0.1394, 0.1091],
         [0.0997, 0.1913, 0.1936,  ..., 0.2141, 0.1394, 0.1091],
         [0.7010, 0.1877, 0.1894,  ..., 0.2579, 0.5819, 0.6727],
         [0.0997, 0.2844, 0.2726,  ..., 0.2721, 0.1394, 0.1091]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3564, 0.3316, 0.3507,  ..., 0.3505, 0.3319, 0.3168],
         [0.1848, 0.1859, 0.1827,  ..., 0.1914, 0.1912, 0.1963],
         [0.1848, 0.1859, 0.1827,  ..., 0.1841, 0.1912, 0.1963],
         [0.2740, 0.2965, 0.2839,  ..., 0.2740, 0.2857, 0.2906]],
        [[0.1137, 0.3577, 0.3864,  ..., 0.3620, 0.3602, 0.0932],
         [0.1137, 0.1779, 0.1755,  ..., 0.1821, 0.1752, 0.0932],
         [0.6588, 0.1741, 0.1739,  ..., 0.1821, 0.1752, 0.7205],
         [0.1137, 0.2903, 0.2642,  ..., 0.2737, 0.2894, 0.0932]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
(2, 512, 3)
2024-08-19 15:42:30,227 [Process: 0] Synchronize training processes
2024-08-19 15:42:30,227 [Process: 0] Evaluating...
2024-08-19 15:42:30,229 [Process: 0] EPOCH 13:
2024-08-19 15:42:30,231 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:31,076 [Process: 0] Synchronize training processes
2024-08-19 15:42:31,076 [Process: 0] Evaluating...
2024-08-19 15:42:31,078 [Process: 0] EPOCH 14:
2024-08-19 15:42:31,080 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
[Process: 0] EPOCH 12:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3518, 0.2500, 0.3365,  ..., 0.3229, 0.3597, 0.3197],
         [0.1809, 0.2500, 0.1872,  ..., 0.1973, 0.1818, 0.1947],
         [0.1809, 0.2500, 0.1723,  ..., 0.1787, 0.1736, 0.1947],
         [0.2865, 0.2500, 0.3039,  ..., 0.3011, 0.2849, 0.2910]],
        [[0.1401, 0.3268, 0.3223,  ..., 0.2386, 0.1383, 0.1329],
         [0.1401, 0.2004, 0.2017,  ..., 0.2121, 0.1427, 0.1329],
         [0.5797, 0.1851, 0.2008,  ..., 0.2559, 0.5807, 0.6014],
         [0.1401, 0.2876, 0.2752,  ..., 0.2934, 0.1383, 0.1329]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3474, 0.3364, 0.3299,  ..., 0.3287, 0.3206, 0.3052],
         [0.1874, 0.1920, 0.1964,  ..., 0.1938, 0.1940, 0.2084],
         [0.1874, 0.1920, 0.1964,  ..., 0.1938, 0.1940, 0.2084],
         [0.2777, 0.2796, 0.2773,  ..., 0.2838, 0.2913, 0.2781]],
        [[0.1326, 0.3193, 0.3495,  ..., 0.3620, 0.3660, 0.0658],
         [0.1390, 0.1914, 0.1868,  ..., 0.1817, 0.1708, 0.0658],
         [0.5958, 0.1914, 0.1742,  ..., 0.1700, 0.1708, 0.8026],
         [0.1326, 0.2980, 0.2895,  ..., 0.2863, 0.2923, 0.0658]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 13:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3590, 0.2500, 0.3611,  ..., 0.3129, 0.3272, 0.3097],
         [0.1725, 0.2500, 0.1836,  ..., 0.1961, 0.2007, 0.1901],
         [0.1725, 0.2500, 0.1786,  ..., 0.1961, 0.1877, 0.1878],
         [0.2960, 0.2500, 0.2766,  ..., 0.2949, 0.2843, 0.3124]],
        [[0.1007, 0.3543, 0.3392,  ..., 0.3122, 0.0760, 0.1457],
         [0.1007, 0.1806, 0.1884,  ..., 0.2010, 0.0790, 0.1457],
         [0.6978, 0.1733, 0.1884,  ..., 0.1975, 0.7689, 0.5629],
         [0.1007, 0.2919, 0.2840,  ..., 0.2893, 0.0760, 0.1457]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3395, 0.3420, 0.3118,  ..., 0.2959, 0.3225, 0.3203],
         [0.1860, 0.1893, 0.1975,  ..., 0.2010, 0.1983, 0.1938],
         [0.1860, 0.1893, 0.1975,  ..., 0.2010, 0.1983, 0.1938],
         [0.2885, 0.2794, 0.2931,  ..., 0.3021, 0.2810, 0.2920]],
        [[0.1949, 0.3615, 0.4246,  ..., 0.4383, 0.4323, 0.0377],
         [0.1949, 0.1689, 0.1608,  ..., 0.1454, 0.1625, 0.0405],
         [0.4154, 0.1689, 0.1353,  ..., 0.1322, 0.1625, 0.8840],
         [0.1949, 0.3008, 0.2793,  ..., 0.2841, 0.2426, 0.0377]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 14:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:32,015 [Process: 0] Synchronize training processes
2024-08-19 15:42:32,015 [Process: 0] Evaluating...
2024-08-19 15:42:32,017 [Process: 0] EPOCH 15:
2024-08-19 15:42:32,019 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:32,988 [Process: 0] Synchronize training processes
2024-08-19 15:42:32,989 [Process: 0] Evaluating...
2024-08-19 15:42:32,990 [Process: 0] EPOCH 16:
2024-08-19 15:42:32,992 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3303, 0.2500, 0.3427,  ..., 0.3278, 0.3003, 0.3374],
         [0.1970, 0.2500, 0.1779,  ..., 0.1918, 0.1975, 0.1924],
         [0.1770, 0.2500, 0.1690,  ..., 0.1918, 0.1975, 0.1768],
         [0.2957, 0.2500, 0.3104,  ..., 0.2885, 0.3047, 0.2934]],
        [[0.0529, 0.3538, 0.3539,  ..., 0.2909, 0.1302, 0.1158],
         [0.0605, 0.1776, 0.1772,  ..., 0.2087, 0.1302, 0.1182],
         [0.8337, 0.1770, 0.1752,  ..., 0.2087, 0.6094, 0.6501],
         [0.0529, 0.2915, 0.2937,  ..., 0.2916, 0.1302, 0.1158]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3205, 0.2954, 0.2873,  ..., 0.2861, 0.2980, 0.2904],
         [0.2040, 0.2153, 0.2119,  ..., 0.2177, 0.2108, 0.2214],
         [0.2040, 0.2153, 0.2119,  ..., 0.2177, 0.2108, 0.2214],
         [0.2714, 0.2739, 0.2890,  ..., 0.2785, 0.2803, 0.2669]],
        [[0.1194, 0.3714, 0.3494,  ..., 0.3869, 0.3413, 0.0699],
         [0.1194, 0.1788, 0.1781,  ..., 0.1623, 0.1826, 0.0699],
         [0.6418, 0.1556, 0.1781,  ..., 0.1623, 0.1826, 0.7904],
         [0.1194, 0.2943, 0.2943,  ..., 0.2885, 0.2934, 0.0699]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 15:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3121, 0.1628, 0.3191,  ..., 0.3825, 0.3193, 0.3134],
         [0.1811, 0.1628, 0.1965,  ..., 0.1694, 0.1973, 0.1985],
         [0.1737, 0.5115, 0.1918,  ..., 0.1687, 0.1886, 0.1985],
         [0.3331, 0.1628, 0.2926,  ..., 0.2793, 0.2948, 0.2896]],
        [[0.0941, 0.3636, 0.3389,  ..., 0.2083, 0.0487, 0.0957],
         [0.1280, 0.1767, 0.1941,  ..., 0.2083, 0.0696, 0.0957],
         [0.6838, 0.1761, 0.1941,  ..., 0.3006, 0.8330, 0.7129],
         [0.0941, 0.2836, 0.2728,  ..., 0.2828, 0.0487, 0.0957]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3422, 0.3143, 0.3152,  ..., 0.2795, 0.2492, 0.2652],
         [0.1874, 0.2146, 0.1991,  ..., 0.2277, 0.2375, 0.2239],
         [0.1874, 0.2146, 0.1991,  ..., 0.2277, 0.2375, 0.2239],
         [0.2830, 0.2565, 0.2867,  ..., 0.2650, 0.2757, 0.2870]],
        [[0.0993, 0.3696, 0.4875,  ..., 0.3323, 0.4186, 0.0458],
         [0.0993, 0.1729, 0.1372,  ..., 0.1900, 0.1559, 0.0458],
         [0.7020, 0.1487, 0.1263,  ..., 0.1900, 0.1559, 0.8627],
         [0.0993, 0.3088, 0.2490,  ..., 0.2878, 0.2695, 0.0458]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 16:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:33,965 [Process: 0] Synchronize training processes
2024-08-19 15:42:33,965 [Process: 0] Evaluating...
2024-08-19 15:42:33,967 [Process: 0] EPOCH 17:
2024-08-19 15:42:33,969 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:34,933 [Process: 0] Synchronize training processes
2024-08-19 15:42:34,933 [Process: 0] Evaluating...
2024-08-19 15:42:34,935 [Process: 0] EPOCH 18:
2024-08-19 15:42:34,936 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3426, 0.2500, 0.2599,  ..., 0.3411, 0.3530, 0.3426],
         [0.1812, 0.2500, 0.2065,  ..., 0.1818, 0.1758, 0.1822],
         [0.1702, 0.2500, 0.2065,  ..., 0.1794, 0.1571, 0.1681],
         [0.3060, 0.2500, 0.3272,  ..., 0.2977, 0.3141, 0.3071]],
        [[0.0946, 0.3635, 0.3478,  ..., 0.2424, 0.2135, 0.0452],
         [0.0946, 0.1783, 0.1859,  ..., 0.2113, 0.2135, 0.0554],
         [0.7161, 0.1783, 0.1859,  ..., 0.2657, 0.3286, 0.8543],
         [0.0946, 0.2799, 0.2805,  ..., 0.2806, 0.2444, 0.0452]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2791, 0.2832, 0.2838,  ..., 0.2631, 0.2809, 0.2361],
         [0.2269, 0.2264, 0.2125,  ..., 0.2313, 0.2128, 0.2237],
         [0.2269, 0.2264, 0.2125,  ..., 0.2313, 0.2128, 0.2237],
         [0.2671, 0.2640, 0.2912,  ..., 0.2744, 0.2935, 0.3166]],
        [[0.1067, 0.3805, 0.3530,  ..., 0.4126, 0.5344, 0.0691],
         [0.1107, 0.1755, 0.1876,  ..., 0.1541, 0.1212, 0.0691],
         [0.6760, 0.1538, 0.1705,  ..., 0.1183, 0.1017, 0.7927],
         [0.1067, 0.2902, 0.2889,  ..., 0.3150, 0.2426, 0.0691]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 17:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3335, 0.2500, 0.2732,  ..., 0.2559, 0.3057, 0.2821],
         [0.1783, 0.2500, 0.1938,  ..., 0.2063, 0.1929, 0.2000],
         [0.1584, 0.2500, 0.1938,  ..., 0.2041, 0.1880, 0.1975],
         [0.3298, 0.2500, 0.3392,  ..., 0.3337, 0.3134, 0.3203]],
        [[0.1097, 0.4750, 0.4407,  ..., 0.2525, 0.2292, 0.0936],
         [0.1114, 0.1513, 0.1514,  ..., 0.2263, 0.2273, 0.0936],
         [0.6691, 0.1347, 0.1509,  ..., 0.2454, 0.2780, 0.7193],
         [0.1097, 0.2390, 0.2570,  ..., 0.2757, 0.2654, 0.0936]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3251, 0.3470, 0.3100,  ..., 0.3050, 0.3009, 0.2957],
         [0.2072, 0.1922, 0.2219,  ..., 0.2155, 0.2062, 0.2236],
         [0.2072, 0.1922, 0.2219,  ..., 0.2155, 0.2062, 0.2236],
         [0.2604, 0.2685, 0.2462,  ..., 0.2640, 0.2868, 0.2571]],
        [[0.1291, 0.2036, 0.2460,  ..., 0.2253, 0.3748, 0.0710],
         [0.1291, 0.2036, 0.1901,  ..., 0.2044, 0.1813, 0.0710],
         [0.6126, 0.2285, 0.1901,  ..., 0.1949, 0.1813, 0.7869],
         [0.1291, 0.3642, 0.3738,  ..., 0.3753, 0.2626, 0.0710]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 18:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
2024-08-19 15:42:35,900 [Process: 0] Synchronize training processes
2024-08-19 15:42:35,900 [Process: 0] Evaluating...
2024-08-19 15:42:35,902 [Process: 0] EPOCH 19:
2024-08-19 15:42:35,903 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
2024-08-19 15:42:36,876 [Process: 0] Synchronize training processes
2024-08-19 15:42:36,877 [Process: 0] Evaluating...
2024-08-19 15:42:36,878 [Process: 0] EPOCH 20:
2024-08-19 15:42:36,880 [Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.4149, 0.2500, 0.4916,  ..., 0.4412, 0.3845, 0.2961],
         [0.1709, 0.2500, 0.1556,  ..., 0.1569, 0.1774, 0.1972],
         [0.1333, 0.2500, 0.1109,  ..., 0.1328, 0.1552, 0.1936],
         [0.2808, 0.2500, 0.2418,  ..., 0.2691, 0.2829, 0.3131]],
        [[0.1592, 0.2970, 0.3268,  ..., 0.2164, 0.2212, 0.0843],
         [0.1592, 0.2130, 0.2021,  ..., 0.2164, 0.2212, 0.0843],
         [0.4817, 0.2130, 0.2021,  ..., 0.3071, 0.2787, 0.7471],
         [0.1998, 0.2771, 0.2690,  ..., 0.2600, 0.2788, 0.0843]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.3293, 0.2915, 0.2592,  ..., 0.2338, 0.2547, 0.2374],
         [0.1980, 0.2285, 0.2399,  ..., 0.2338, 0.2449, 0.2374],
         [0.1980, 0.2285, 0.2399,  ..., 0.2459, 0.2449, 0.2374],
         [0.2747, 0.2515, 0.2610,  ..., 0.2864, 0.2556, 0.2879]],
        [[0.0727, 0.4888, 0.4296,  ..., 0.4465, 0.4156, 0.0733],
         [0.0727, 0.1533, 0.1591,  ..., 0.1659, 0.1641, 0.0733],
         [0.7820, 0.0982, 0.1181,  ..., 0.1566, 0.1414, 0.7802],
         [0.0727, 0.2596, 0.2931,  ..., 0.2310, 0.2789, 0.0733]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 19:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.5091, 0.2500, 0.3088,  ..., 0.4383, 0.4311, 0.2386],
         [0.1449, 0.2500, 0.1887,  ..., 0.1589, 0.1558, 0.2137],
         [0.0969, 0.2500, 0.1887,  ..., 0.1128, 0.1262, 0.2395],
         [0.2491, 0.2500, 0.3137,  ..., 0.2901, 0.2870, 0.3082]],
        [[0.1051, 0.4220, 0.3960,  ..., 0.2406, 0.2250, 0.1894],
         [0.1051, 0.1824, 0.1597,  ..., 0.2406, 0.2250, 0.1894],
         [0.6846, 0.1824, 0.1557,  ..., 0.2406, 0.2472, 0.3702],
         [0.1051, 0.2133, 0.2887,  ..., 0.2783, 0.3028, 0.2511]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2500, 0.4920, 0.2268,  ..., 0.2774, 0.2256, 0.2391],
         [0.2500, 0.1451, 0.2268,  ..., 0.2215, 0.2256, 0.2391],
         [0.2500, 0.1285, 0.2651,  ..., 0.2215, 0.2652, 0.2648],
         [0.2500, 0.2344, 0.2813,  ..., 0.2797, 0.2837, 0.2571]],
        [[0.0166, 0.4168, 0.3600,  ..., 0.4680, 0.4286, 0.0594],
         [0.0166, 0.1638, 0.1760,  ..., 0.1495, 0.1592, 0.0594],
         [0.9501, 0.1309, 0.1726,  ..., 0.0981, 0.1094, 0.8219],
         [0.0166, 0.2885, 0.2914,  ..., 0.2844, 0.3028, 0.0594]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 20:
[Worker 0] Loss fn: focal - FocalLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.6601, 0.6574, 0.1882,  ..., 0.4902, 0.2159, 0.1936],
         [0.0968, 0.1142, 0.1882,  ..., 0.1403, 0.2159, 0.1936],
         [0.0614, 0.1142, 0.2377,  ..., 0.0931, 0.2205, 0.2321],
         [0.1817, 0.1142, 0.3859,  ..., 0.2763, 0.3476, 0.3808]],
        [[0.0759, 0.5064, 0.4005,  ..., 0.2276, 0.1845, 0.1443],
         [0.0764, 0.1469, 0.1659,  ..., 0.2276, 0.1845, 0.1443],
         [0.7717, 0.1469, 0.1520,  ..., 0.3032, 0.4333, 0.5603],
         [0.0759, 0.1998, 0.2816,  ..., 0.2416, 0.1977, 0.1510]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
2024-08-19 15:42:37,847 [Process: 0] Synchronize training processes
2024-08-19 15:42:37,847 [Process: 0] Evaluating...
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 512])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 512, 3])
-----align shape: torch.Size([2, 16, 512])
------x shape: torch.Size([2, 35, 512])
------fusion x shape: torch.Size([2, 4, 512])
------target shape: torch.Size([2, 512, 4])
tensor([[[0.2241, 0.3478, 0.3312,  ..., 0.3948, 0.1867, 0.2078],
         [0.2241, 0.1818, 0.2094,  ..., 0.1808, 0.1867, 0.2078],
         [0.2748, 0.1818, 0.2094,  ..., 0.1808, 0.3304, 0.3136],
         [0.2770, 0.2887, 0.2500,  ..., 0.2435, 0.2962, 0.2708]],
        [[0.0508, 0.4728, 0.6015,  ..., 0.5569, 0.2236, 0.0544],
         [0.0508, 0.1515, 0.1161,  ..., 0.1226, 0.1958, 0.0544],
         [0.8476, 0.1296, 0.0937,  ..., 0.1050, 0.1958, 0.8369],
         [0.0508, 0.2461, 0.1887,  ..., 0.2156, 0.3848, 0.0544]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 512])
mask shape: torch.Size([2, 512, 4])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...