[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[2.2866e-01, 4.8874e-04, 2.0653e-01,  ..., 3.8136e-01,
          2.6134e-01, 2.4752e-01],
         [2.5376e-01, 9.9853e-01, 2.0440e-01,  ..., 2.4701e-01,
          2.2984e-01, 2.5745e-01],
         [2.2147e-01, 4.8874e-04, 1.4999e-01,  ..., 1.7170e-01,
          2.2586e-01, 2.4752e-01],
         [2.9611e-01, 4.8874e-04, 4.3909e-01,  ..., 1.9993e-01,
          2.8297e-01, 2.4752e-01]],
        [[2.2543e-01, 1.2243e-02, 2.3207e-01,  ..., 5.9863e-02,
          3.6812e-01, 2.2711e-01],
         [2.7573e-01, 1.2243e-02, 3.0379e-01,  ..., 5.6082e-02,
          2.2579e-01, 2.6829e-01],
         [2.7341e-01, 9.6327e-01, 2.3207e-01,  ..., 5.6082e-02,
          2.0305e-01, 2.7749e-01],
         [2.2543e-01, 1.2243e-02, 2.3207e-01,  ..., 8.2797e-01,
          2.0305e-01, 2.2711e-01]]], device='cuda:0',
       grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 15:38:05,125 [Worker 0] Is distributed: False
2024-08-16 15:38:05,125 [Process: 0] Starting training
2024-08-16 15:38:05,125 [Process: 0] EPOCH 1:
2024-08-16 15:38:05,128 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[2.3181e-01, 3.0171e-07, 2.3292e-01,  ..., 2.1386e-01,
          2.2737e-01, 2.4750e-01],
         [2.3181e-01, 1.0000e+00, 2.3292e-01,  ..., 2.1386e-01,
          2.1165e-01, 2.4750e-01],
         [2.8885e-01, 3.0171e-07, 2.4099e-01,  ..., 3.5843e-01,
          2.4637e-01, 2.4750e-01],
         [2.4753e-01, 3.0171e-07, 2.9317e-01,  ..., 2.1386e-01,
          3.1462e-01, 2.5751e-01]],
        [[2.5971e-01, 4.9400e-02, 2.1129e-01,  ..., 2.2664e-01,
          2.5918e-01, 2.8058e-01],
         [2.3934e-01, 8.7878e-01, 2.0340e-01,  ..., 2.1177e-01,
          1.7694e-01, 2.0385e-01],
         [2.3934e-01, 3.5911e-02, 2.8397e-01,  ..., 2.8826e-01,
          3.0947e-01, 2.1791e-01],
         [2.6162e-01, 3.5911e-02, 3.0133e-01,  ..., 2.7333e-01,
          2.5441e-01, 2.9766e-01]]], device='cuda:0',
       grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2057, 0.2297, 0.1971,  ..., 0.1962, 0.2111, 0.1933],
         [0.2057, 0.2297, 0.1971,  ..., 0.1962, 0.2111, 0.1933],
         [0.2057, 0.3109, 0.1971,  ..., 0.2090, 0.2590, 0.2041],
         [0.3829, 0.2297, 0.4087,  ..., 0.3986, 0.3187, 0.4093]],
        [[0.2237, 0.1718, 0.2379,  ..., 0.1647, 0.2425, 0.2069],
         [0.2237, 0.8210, 0.2379,  ..., 0.1747, 0.2425, 0.2069],
         [0.2237, 0.0036, 0.2442,  ..., 0.4958, 0.2725, 0.3313],
         [0.3288, 0.0036, 0.2800,  ..., 0.1647, 0.2425, 0.2548]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 15:38:07,859 [Process: 0] Synchronize training processes
2024-08-16 15:38:07,860 [Process: 0] Evaluating...
2024-08-16 15:38:07,869 [Process: 0] EPOCH 2:
2024-08-16 15:38:07,871 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1731, 0.0880, 0.1549,  ..., 0.2022, 0.1867, 0.1714],
         [0.1731, 0.3434, 0.1549,  ..., 0.2022, 0.1867, 0.1714],
         [0.1731, 0.5653, 0.1549,  ..., 0.2022, 0.1867, 0.1881],
         [0.4806, 0.0033, 0.5353,  ..., 0.3933, 0.4399, 0.4691]],
        [[0.2500, 0.7147, 0.2500,  ..., 0.2494, 0.2500, 0.2477],
         [0.2500, 0.2738, 0.2500,  ..., 0.2494, 0.2500, 0.2477],
         [0.2500, 0.0038, 0.2500,  ..., 0.2519, 0.2500, 0.2569],
         [0.2500, 0.0078, 0.2500,  ..., 0.2494, 0.2500, 0.2477]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
2024-08-16 15:38:09,779 [Process: 0] Synchronize training processes
2024-08-16 15:38:09,779 [Process: 0] Evaluating...
2024-08-16 15:38:09,781 [Process: 0] EPOCH 3:
2024-08-16 15:38:09,783 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
Traceback (most recent call last):
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 37, in <module>
    main()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 367, in _run_hydra
    run_and_report(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 368, in <lambda>
    lambda: hydra.run(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/hydra.py", line 97, in run
    ret = run_job(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 31, in main
    trainer.train()
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 340, in train
    avg_loss = self.train_one_epoch(epoch)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 198, in train_one_epoch
    outputs = self.model(batch=batch)["affordance"].squeeze(1)
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/models/GeoL.py", line 67, in forward
    x_align = self.concate(x_rgb["affordance"], scene_pcs, self.instrics).permute(0,2,1) # [B, Num_pts, C_rgbfeat]
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/models/modules.py", line 133, in forward
    feat_2d = self.interpolate_image_grid_features(
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/models/modules.py", line 76, in interpolate_image_grid_features
    query_grids = self.project_3d(query_points, intrinsics)  # [B, 2, N]
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/models/modules.py", line 35, in forward
    K = torch.from_numpy(K).float().to(points.device)
KeyboardInterrupt