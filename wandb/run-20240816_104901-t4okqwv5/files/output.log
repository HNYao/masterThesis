2024-08-16 10:49:06,284 [Worker 0] Is distributed: False
2024-08-16 10:49:06,284 [Process: 0] Starting training
2024-08-16 10:49:06,285 [Process: 0] EPOCH 1:
2024-08-16 10:49:06,287 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2288, 0.2102, 0.2691,  ..., 0.3613, 0.3844, 0.3568],
         [0.2360, 0.3695, 0.2254,  ..., 0.2129, 0.2029, 0.2303],
         [0.3065, 0.2102, 0.2067,  ..., 0.2129, 0.2029, 0.2065],
         [0.2288, 0.2102, 0.2988,  ..., 0.2129, 0.2099, 0.2065]],
        [[0.2659, 0.2759, 0.2439,  ..., 0.2364, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2683,  ..., 0.2658, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2439,  ..., 0.2615, 0.3221, 0.2638],
         [0.2447, 0.2414, 0.2439,  ..., 0.2364, 0.2260, 0.2454]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 10:49:08,821 [Process: 0] Synchronize training processes
2024-08-16 10:49:08,821 [Process: 0] Evaluating...
2024-08-16 10:49:08,823 [Process: 0] EPOCH 2:
2024-08-16 10:49:08,825 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2882, 0.4238, 0.3877,  ..., 0.3149, 0.4435, 0.5030],
         [0.3697, 0.1921, 0.2041,  ..., 0.3509, 0.1834, 0.2029],
         [0.1710, 0.1921, 0.2041,  ..., 0.1671, 0.1897, 0.1471],
         [0.1710, 0.1921, 0.2041,  ..., 0.1671, 0.1834, 0.1471]],
        [[0.1494, 0.1406, 0.1160,  ..., 0.0669, 0.1700, 0.1651],
         [0.1494, 0.1406, 0.1160,  ..., 0.3106, 0.0889, 0.1651],
         [0.4959, 0.5782, 0.3429,  ..., 0.1245, 0.3301, 0.3290],
         [0.2054, 0.1406, 0.4250,  ..., 0.4979, 0.4110, 0.3407]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.4113, 0.3075, 0.2843,  ..., 0.2839, 0.0736, 0.5082],
         [0.2302, 0.1063, 0.3417,  ..., 0.1602, 0.0736, 0.2085],
         [0.1793, 0.0996, 0.1318,  ..., 0.1602, 0.7791, 0.0896],
         [0.1793, 0.4866, 0.2421,  ..., 0.3957, 0.0736, 0.1938]],
        [[0.1355, 0.2500, 0.2205,  ..., 0.2500, 0.2483, 0.2527],
         [0.5303, 0.2500, 0.2205,  ..., 0.2500, 0.2552, 0.1670],
         [0.1355, 0.2500, 0.3385,  ..., 0.2500, 0.2483, 0.4132],
         [0.1987, 0.2500, 0.2205,  ..., 0.2500, 0.2483, 0.1670]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 10:49:10,721 [Process: 0] Synchronize training processes
2024-08-16 10:49:10,722 [Process: 0] Evaluating...
2024-08-16 10:49:10,724 [Process: 0] EPOCH 3:
2024-08-16 10:49:10,725 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.5033, 0.1464, 0.1555,  ..., 0.2500, 0.1659, 0.3323],
         [0.2067, 0.3077, 0.2672,  ..., 0.2500, 0.2884, 0.2226],
         [0.1090, 0.3470, 0.1555,  ..., 0.2500, 0.2214, 0.2226],
         [0.1810, 0.1989, 0.4218,  ..., 0.2500, 0.3243, 0.2226]],
        [[0.2322, 0.5240, 0.1246,  ..., 0.2165, 0.2410, 0.1994],
         [0.2322, 0.1440, 0.1246,  ..., 0.2440, 0.2410, 0.1994],
         [0.2322, 0.1759, 0.4840,  ..., 0.3230, 0.2771, 0.4019],
         [0.3034, 0.1561, 0.2669,  ..., 0.2165, 0.2410, 0.1994]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2500, 0.1135, 0.1244,  ..., 0.2500, 0.1029, 0.2415],
         [0.2500, 0.5767, 0.6268,  ..., 0.2500, 0.0847, 0.1127],
         [0.2500, 0.1962, 0.1244,  ..., 0.2500, 0.7277, 0.5332],
         [0.2500, 0.1135, 0.1244,  ..., 0.2500, 0.0847, 0.1127]],
        [[0.2810, 0.4566, 0.2522,  ..., 0.4838, 0.5330, 0.1083],
         [0.1357, 0.0923, 0.2597,  ..., 0.2366, 0.1557, 0.1332],
         [0.2170, 0.1075, 0.2379,  ..., 0.1550, 0.1557, 0.1604],
         [0.3663, 0.3436, 0.2502,  ..., 0.1245, 0.1557, 0.5981]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 10:49:12,607 [Process: 0] Synchronize training processes
2024-08-16 10:49:12,607 [Process: 0] Evaluating...
2024-08-16 10:49:12,610 [Process: 0] EPOCH 4:
2024-08-16 10:49:12,612 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.4857, 0.4368, 0.1545,  ..., 0.3479, 0.1687, 0.2599],
         [0.1187, 0.1253, 0.5177,  ..., 0.2174, 0.1964, 0.4719],
         [0.0807, 0.3127, 0.1545,  ..., 0.2174, 0.4661, 0.1131],
         [0.3148, 0.1253, 0.1733,  ..., 0.2174, 0.1687, 0.1552]],
        [[0.1997, 0.1650, 0.1836,  ..., 0.2145, 0.1437, 0.1882],
         [0.1997, 0.3502, 0.4493,  ..., 0.2145, 0.3879, 0.1863],
         [0.1997, 0.3197, 0.1836,  ..., 0.3564, 0.3156, 0.3501],
         [0.4009, 0.1650, 0.1836,  ..., 0.2145, 0.1529, 0.2754]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1944, 0.1575, 0.1754,  ..., 0.3430, 0.2447, 0.2500],
         [0.4169, 0.1575, 0.1754,  ..., 0.1842, 0.2447, 0.2500],
         [0.1944, 0.1698, 0.4738,  ..., 0.1001, 0.2660, 0.2500],
         [0.1944, 0.5152, 0.1754,  ..., 0.3727, 0.2447, 0.2500]],
        [[0.3995, 0.0876, 0.1538,  ..., 0.1911, 0.2500, 0.5615],
         [0.1315, 0.4228, 0.5952,  ..., 0.4266, 0.2500, 0.1715],
         [0.1482, 0.0656, 0.0612,  ..., 0.1911, 0.2500, 0.0823],
         [0.3208, 0.4240, 0.1898,  ..., 0.1911, 0.2500, 0.1847]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 10:49:14,496 [Process: 0] Synchronize training processes
2024-08-16 10:49:14,497 [Process: 0] Evaluating...
2024-08-16 10:49:14,498 [Process: 0] EPOCH 5:
2024-08-16 10:49:14,501 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1155, 0.1498, 0.5605,  ..., 0.4263, 0.3443, 0.3529],
         [0.1155, 0.5636, 0.0881,  ..., 0.1912, 0.2952, 0.2965],
         [0.6534, 0.1778, 0.1312,  ..., 0.1912, 0.1406, 0.1658],
         [0.1155, 0.1088, 0.2203,  ..., 0.1912, 0.2199, 0.1847]],
        [[0.2466, 0.0714, 0.1040,  ..., 0.1611, 0.2357, 0.2500],
         [0.3351, 0.6215, 0.6880,  ..., 0.4187, 0.2929, 0.2500],
         [0.2091, 0.1172, 0.1040,  ..., 0.2592, 0.2357, 0.2500],
         [0.2091, 0.1899, 0.1040,  ..., 0.1611, 0.2357, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 5:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1510, 0.2529, 0.4243,  ..., 0.4744, 0.1719, 0.2929],
         [0.2425, 0.5277, 0.1466,  ..., 0.1752, 0.2777, 0.1071],
         [0.3029, 0.0918, 0.1466,  ..., 0.1752, 0.4360, 0.1071],
         [0.3036, 0.1276, 0.2825,  ..., 0.1752, 0.1144, 0.4928]],
        [[0.1997, 0.1780, 0.2210,  ..., 0.1868, 0.1828, 0.2742],
         [0.2472, 0.3334, 0.3370,  ..., 0.1868, 0.1828, 0.2361],
         [0.3535, 0.3106, 0.2210,  ..., 0.4396, 0.4516, 0.1813],
         [0.1997, 0.1780, 0.2210,  ..., 0.1868, 0.1828, 0.3085]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 10:49:16,393 [Process: 0] Step: 1	 Loss: nan	 Metrics: 0	 Loss pre: nan	 P Mask: tensor([nan, nan], device='cuda:0', grad_fn=<SumBackward1>) inp: 0.0 - 209.0
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan]],
        [[nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan],
         [nan, nan, nan,  ..., nan, nan, nan]]], device='cuda:0',
       grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Step: 1	 Loss: nan	 Metrics: 0	 Loss pre: nan	 P Mask: tensor([nan, nan], device='cuda:0', grad_fn=<SumBackward1>) inp: 0.0 - 209.0