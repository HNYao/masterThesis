2024-08-16 14:05:55,653 [Worker 0] Is distributed: False
2024-08-16 14:05:55,653 [Process: 0] Starting training
2024-08-16 14:05:55,654 [Process: 0] EPOCH 1:
2024-08-16 14:05:55,656 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2288, 0.2102, 0.2691,  ..., 0.3613, 0.3844, 0.3568],
         [0.2360, 0.3695, 0.2254,  ..., 0.2129, 0.2029, 0.2303],
         [0.3065, 0.2102, 0.2067,  ..., 0.2129, 0.2029, 0.2065],
         [0.2288, 0.2102, 0.2988,  ..., 0.2129, 0.2099, 0.2065]],
        [[0.2659, 0.2759, 0.2439,  ..., 0.2364, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2683,  ..., 0.2658, 0.2260, 0.2454],
         [0.2447, 0.2414, 0.2439,  ..., 0.2615, 0.3221, 0.2638],
         [0.2447, 0.2414, 0.2439,  ..., 0.2364, 0.2260, 0.2454]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:05:58,301 [Process: 0] Synchronize training processes
2024-08-16 14:05:58,301 [Process: 0] Evaluating...
2024-08-16 14:05:58,310 [Process: 0] EPOCH 2:
2024-08-16 14:05:58,312 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.4396, 0.3524, 0.4792,  ..., 0.4115, 0.3829, 0.2219],
         [0.1868, 0.2312, 0.1712,  ..., 0.3008, 0.3758, 0.3813],
         [0.1868, 0.2037, 0.1712,  ..., 0.1438, 0.1388, 0.1984],
         [0.1868, 0.2127, 0.1785,  ..., 0.1438, 0.1024, 0.1984]],
        [[0.2283, 0.1580, 0.2219,  ..., 0.1651, 0.1745, 0.2046],
         [0.2283, 0.1580, 0.2219,  ..., 0.3182, 0.1539, 0.2046],
         [0.3152, 0.4961, 0.2219,  ..., 0.1651, 0.3268, 0.3118],
         [0.2283, 0.1880, 0.3344,  ..., 0.3517, 0.3448, 0.2790]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2935, 0.2357, 0.2155,  ..., 0.2482, 0.2500, 0.2088],
         [0.2292, 0.2078, 0.3386,  ..., 0.2043, 0.2500, 0.2972],
         [0.2292, 0.2045, 0.1968,  ..., 0.1875, 0.2500, 0.2227],
         [0.2481, 0.3520, 0.2491,  ..., 0.3599, 0.2500, 0.2713]],
        [[0.2244, 0.2476, 0.2684,  ..., 0.2849, 0.2765, 0.3141],
         [0.3269, 0.2983, 0.2439,  ..., 0.2338, 0.2412, 0.2130],
         [0.2244, 0.2254, 0.2439,  ..., 0.2200, 0.2412, 0.2706],
         [0.2244, 0.2287, 0.2439,  ..., 0.2613, 0.2412, 0.2024]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:00,283 [Process: 0] Synchronize training processes
2024-08-16 14:06:00,283 [Process: 0] Evaluating...
2024-08-16 14:06:00,285 [Process: 0] EPOCH 3:
2024-08-16 14:06:00,287 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.4164, 0.1353, 0.2284,  ..., 0.3141, 0.1245, 0.3258],
         [0.3212, 0.4328, 0.4600,  ..., 0.2286, 0.2309, 0.3826],
         [0.1399, 0.2967, 0.1586,  ..., 0.2286, 0.4590, 0.1626],
         [0.1225, 0.1353, 0.1530,  ..., 0.2286, 0.1856, 0.1290]],
        [[0.1543, 0.0603, 0.0476,  ..., 0.0948, 0.1643, 0.2500],
         [0.1543, 0.0325, 0.0429,  ..., 0.0921, 0.1643, 0.2500],
         [0.1543, 0.1255, 0.2015,  ..., 0.0921, 0.1643, 0.2500],
         [0.5372, 0.7817, 0.7080,  ..., 0.7210, 0.5072, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2625, 0.3032, 0.2690,  ..., 0.2218, 0.2642, 0.2607],
         [0.2644, 0.1793, 0.2188,  ..., 0.2035, 0.2463, 0.3379],
         [0.2151, 0.1582, 0.1570,  ..., 0.2071, 0.2365, 0.1869],
         [0.2580, 0.3592, 0.3552,  ..., 0.3677, 0.2530, 0.2145]],
        [[0.2494, 0.2255, 0.2448,  ..., 0.2209, 0.2457, 0.2302],
         [0.2501, 0.3120, 0.2822,  ..., 0.3094, 0.2457, 0.2687],
         [0.2494, 0.2255, 0.2539,  ..., 0.2487, 0.2630, 0.2246],
         [0.2511, 0.2370, 0.2192,  ..., 0.2209, 0.2457, 0.2764]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:02,231 [Process: 0] Synchronize training processes
2024-08-16 14:06:02,231 [Process: 0] Evaluating...
2024-08-16 14:06:02,233 [Process: 0] EPOCH 4:
2024-08-16 14:06:02,235 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.3279, 0.1356, 0.0975,  ..., 0.2463, 0.1316, 0.2065],
         [0.2240, 0.1356, 0.0975,  ..., 0.2463, 0.1316, 0.1848],
         [0.2240, 0.5933, 0.7075,  ..., 0.2610, 0.6052, 0.4436],
         [0.2240, 0.1356, 0.0975,  ..., 0.2463, 0.1316, 0.1651]],
        [[0.1842, 0.2205, 0.2223,  ..., 0.3895, 0.3916, 0.1542],
         [0.5010, 0.2203, 0.6195,  ..., 0.3001, 0.2837, 0.5266],
         [0.1574, 0.1260, 0.0791,  ..., 0.1552, 0.1256, 0.1650],
         [0.1574, 0.4332, 0.0791,  ..., 0.1552, 0.1991, 0.1542]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2500, 0.2280, 0.2473,  ..., 0.2435, 0.2443, 0.2722],
         [0.2500, 0.1789, 0.2473,  ..., 0.2504, 0.2443, 0.2586],
         [0.2500, 0.1554, 0.2582,  ..., 0.2309, 0.2672, 0.2341],
         [0.2500, 0.4378, 0.2473,  ..., 0.2753, 0.2443, 0.2351]],
        [[0.2078, 0.2156, 0.3069,  ..., 0.2838, 0.2336, 0.2895],
         [0.2883, 0.3177, 0.2636,  ..., 0.2749, 0.2316, 0.2579],
         [0.2078, 0.1884, 0.2017,  ..., 0.2149, 0.1816, 0.2089],
         [0.2962, 0.2782, 0.2278,  ..., 0.2264, 0.3532, 0.2437]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:04,179 [Process: 0] Synchronize training processes
2024-08-16 14:06:04,179 [Process: 0] Evaluating...
2024-08-16 14:06:04,181 [Process: 0] EPOCH 5:
2024-08-16 14:06:04,183 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1625, 0.1539, 0.7244,  ..., 0.2790, 0.2500, 0.4243],
         [0.1625, 0.1539, 0.0919,  ..., 0.2564, 0.2500, 0.1688],
         [0.5125, 0.5383, 0.0919,  ..., 0.3098, 0.2500, 0.2381],
         [0.1625, 0.1539, 0.0919,  ..., 0.1547, 0.2500, 0.1688]],
        [[0.3851, 0.2940, 0.1558,  ..., 0.1753, 0.1883, 0.1842],
         [0.3537, 0.4225, 0.5326,  ..., 0.4421, 0.2818, 0.1842],
         [0.1306, 0.1060, 0.1558,  ..., 0.1753, 0.1883, 0.1842],
         [0.1306, 0.1774, 0.1558,  ..., 0.2072, 0.3417, 0.4474]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 5:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2430, 0.1982, 0.2749,  ..., 0.2792, 0.2236, 0.2340],
         [0.2430, 0.3736, 0.2214,  ..., 0.2321, 0.2193, 0.1896],
         [0.2430, 0.1758, 0.2214,  ..., 0.1846, 0.3254, 0.1860],
         [0.2711, 0.2524, 0.2823,  ..., 0.3041, 0.2317, 0.3905]],
        [[0.2812, 0.2500, 0.2500,  ..., 0.2476, 0.2486, 0.3065],
         [0.2173, 0.2500, 0.2500,  ..., 0.2476, 0.2845, 0.2193],
         [0.2173, 0.2500, 0.2500,  ..., 0.2571, 0.2335, 0.2193],
         [0.2842, 0.2500, 0.2500,  ..., 0.2476, 0.2335, 0.2549]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:06,154 [Process: 0] Synchronize training processes
2024-08-16 14:06:06,154 [Process: 0] Evaluating...
2024-08-16 14:06:06,156 [Process: 0] EPOCH 6:
2024-08-16 14:06:06,158 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2500, 0.2500, 0.2500,  ..., 0.2599, 0.2500, 0.0595],
         [0.2500, 0.2500, 0.2500,  ..., 0.2467, 0.2500, 0.0595],
         [0.2500, 0.2500, 0.2500,  ..., 0.2467, 0.2500, 0.8215],
         [0.2500, 0.2500, 0.2500,  ..., 0.2467, 0.2500, 0.0595]],
        [[0.1295, 0.1305, 0.1801,  ..., 0.2270, 0.2094, 0.1536],
         [0.5342, 0.1571, 0.3147,  ..., 0.1650, 0.2286, 0.4388],
         [0.1336, 0.5820, 0.3250,  ..., 0.2714, 0.1609, 0.1030],
         [0.2026, 0.1305, 0.1801,  ..., 0.3366, 0.4011, 0.3046]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 6:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2250, 0.2468, 0.2352,  ..., 0.2288, 0.1976, 0.3221],
         [0.3146, 0.2597, 0.1860,  ..., 0.2482, 0.2431, 0.2133],
         [0.2035, 0.2468, 0.2051,  ..., 0.1634, 0.1886, 0.1995],
         [0.2569, 0.2468, 0.3737,  ..., 0.3596, 0.3707, 0.2651]],
        [[0.3122, 0.2576, 0.3240,  ..., 0.2866, 0.2500, 0.2500],
         [0.2293, 0.2475, 0.2208,  ..., 0.2253, 0.2500, 0.2500],
         [0.2293, 0.2475, 0.2208,  ..., 0.2253, 0.2500, 0.2500],
         [0.2293, 0.2475, 0.2343,  ..., 0.2628, 0.2500, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:08,132 [Process: 0] Synchronize training processes
2024-08-16 14:06:08,132 [Process: 0] Evaluating...
2024-08-16 14:06:08,134 [Process: 0] EPOCH 7:
2024-08-16 14:06:08,136 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1252, 0.1342, 0.2408,  ..., 0.1597, 0.3973, 0.1025],
         [0.6243, 0.1342, 0.2408,  ..., 0.1597, 0.2009, 0.1624],
         [0.1252, 0.1519, 0.2777,  ..., 0.5208, 0.2009, 0.4919],
         [0.1252, 0.5797, 0.2408,  ..., 0.1597, 0.2009, 0.2432]],
        [[0.4165, 0.1853, 0.1276,  ..., 0.1965, 0.4953, 0.1837],
         [0.1673, 0.2065, 0.6172,  ..., 0.4104, 0.0960, 0.1837],
         [0.1673, 0.1853, 0.1276,  ..., 0.1965, 0.0503, 0.1837],
         [0.2489, 0.4230, 0.1276,  ..., 0.1965, 0.3585, 0.4490]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 7:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1845, 0.1862, 0.2152,  ..., 0.1644, 0.2137, 0.2132],
         [0.2412, 0.3222, 0.3582,  ..., 0.4193, 0.2256, 0.1869],
         [0.1792, 0.1982, 0.1497,  ..., 0.1896, 0.1779, 0.2906],
         [0.3951, 0.2934, 0.2769,  ..., 0.2266, 0.3828, 0.3093]],
        [[0.2522, 0.2500, 0.2644,  ..., 0.2500, 0.2478, 0.2528],
         [0.2493, 0.2500, 0.2452,  ..., 0.2500, 0.2565, 0.2491],
         [0.2493, 0.2500, 0.2452,  ..., 0.2500, 0.2478, 0.2491],
         [0.2493, 0.2500, 0.2452,  ..., 0.2500, 0.2478, 0.2491]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:10,096 [Process: 0] Synchronize training processes
2024-08-16 14:06:10,096 [Process: 0] Evaluating...
2024-08-16 14:06:10,098 [Process: 0] EPOCH 8:
2024-08-16 14:06:10,100 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.3576, 0.1866, 0.1493,  ..., 0.3919, 0.2268, 0.3149],
         [0.2330, 0.1629, 0.1941,  ..., 0.1662, 0.2126, 0.2013],
         [0.1460, 0.2234, 0.4569,  ..., 0.1516, 0.2768, 0.3014],
         [0.2634, 0.4272, 0.1998,  ..., 0.2903, 0.2838, 0.1824]],
        [[0.3339, 0.2500, 0.2819,  ..., 0.2500, 0.2500, 0.1960],
         [0.2077, 0.2500, 0.2394,  ..., 0.2500, 0.2500, 0.4119],
         [0.1869, 0.2500, 0.2394,  ..., 0.2500, 0.2500, 0.1960],
         [0.2714, 0.2500, 0.2394,  ..., 0.2500, 0.2500, 0.1960]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 8:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2159, 0.2452, 0.2340,  ..., 0.2134, 0.2419, 0.2369],
         [0.2159, 0.2644, 0.2340,  ..., 0.2036, 0.2742, 0.1646],
         [0.2433, 0.2452, 0.2340,  ..., 0.2242, 0.2419, 0.2211],
         [0.3249, 0.2452, 0.2979,  ..., 0.3588, 0.2419, 0.3774]],
        [[0.3637, 0.2474, 0.2500,  ..., 0.3389, 0.3563, 0.2662],
         [0.2441, 0.2928, 0.2500,  ..., 0.2324, 0.2146, 0.2430],
         [0.1961, 0.2195, 0.2500,  ..., 0.2143, 0.2146, 0.2479],
         [0.1961, 0.2404, 0.2500,  ..., 0.2143, 0.2146, 0.2430]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:12,029 [Process: 0] Synchronize training processes
2024-08-16 14:06:12,029 [Process: 0] Evaluating...
2024-08-16 14:06:12,031 [Process: 0] EPOCH 9:
2024-08-16 14:06:12,033 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2256, 0.1643, 0.1791,  ..., 0.2192, 0.2500, 0.1203],
         [0.3300, 0.4445, 0.2532,  ..., 0.3425, 0.2500, 0.6392],
         [0.2222, 0.1643, 0.1983,  ..., 0.2192, 0.2500, 0.1203],
         [0.2222, 0.2270, 0.3695,  ..., 0.2192, 0.2500, 0.1203]],
        [[0.2622, 0.2500, 0.2071,  ..., 0.2408, 0.1759, 0.0876],
         [0.2319, 0.2500, 0.2817,  ..., 0.1334, 0.1759, 0.0126],
         [0.2938, 0.2500, 0.2031,  ..., 0.4819, 0.4723, 0.0218],
         [0.2121, 0.2500, 0.3080,  ..., 0.1439, 0.1759, 0.8781]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 9:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2202, 0.1720, 0.1838,  ..., 0.2144, 0.2787, 0.2060],
         [0.1724, 0.2568, 0.1941,  ..., 0.2362, 0.1945, 0.2982],
         [0.1724, 0.1486, 0.1838,  ..., 0.2144, 0.1945, 0.2060],
         [0.4350, 0.4226, 0.4382,  ..., 0.3350, 0.3324, 0.2898]],
        [[0.2408, 0.3028, 0.2415,  ..., 0.2500, 0.2574, 0.2786],
         [0.2600, 0.2324, 0.2544,  ..., 0.2500, 0.2475, 0.2405],
         [0.2408, 0.2324, 0.2344,  ..., 0.2500, 0.2475, 0.2405],
         [0.2584, 0.2324, 0.2697,  ..., 0.2500, 0.2475, 0.2405]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:13,958 [Process: 0] Synchronize training processes
2024-08-16 14:06:13,959 [Process: 0] Evaluating...
2024-08-16 14:06:13,961 [Process: 0] EPOCH 10:
2024-08-16 14:06:13,963 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2829, 0.4325, 0.1881,  ..., 0.2837, 0.1257, 0.2450],
         [0.2345, 0.2933, 0.3107,  ..., 0.2813, 0.1257, 0.2649],
         [0.2345, 0.1371, 0.1881,  ..., 0.0959, 0.1257, 0.2450],
         [0.2480, 0.1371, 0.3131,  ..., 0.3391, 0.6228, 0.2450]],
        [[0.1762, 0.2224, 0.4789,  ..., 0.2191, 0.2216, 0.3574],
         [0.1762, 0.2224, 0.1535,  ..., 0.3344, 0.1389, 0.2035],
         [0.3976, 0.3327, 0.1860,  ..., 0.2608, 0.5006, 0.2356],
         [0.2500, 0.2224, 0.1816,  ..., 0.1857, 0.1389, 0.2035]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 10:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.2082, 0.1965, 0.2205,  ..., 0.2274, 0.2095, 0.2122],
         [0.1414, 0.1941, 0.1744,  ..., 0.2274, 0.2095, 0.2199],
         [0.1414, 0.2349, 0.1744,  ..., 0.2274, 0.2642, 0.2122],
         [0.5090, 0.3746, 0.4307,  ..., 0.3179, 0.3167, 0.3558]],
        [[0.2494, 0.2567, 0.2884,  ..., 0.2500, 0.3239, 0.2350],
         [0.2494, 0.2478, 0.2369,  ..., 0.2500, 0.2254, 0.2951],
         [0.2519, 0.2478, 0.2369,  ..., 0.2500, 0.2254, 0.2350],
         [0.2494, 0.2478, 0.2378,  ..., 0.2500, 0.2254, 0.2350]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
2024-08-16 14:06:15,921 [Process: 0] Synchronize training processes
2024-08-16 14:06:15,921 [Process: 0] Evaluating...
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 4096])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
-----align shape: torch.Size([2, 16, 4096])
------x shape: torch.Size([2, 35, 4096])
------fusion x shape: torch.Size([2, 4, 4096])
------target shape: torch.Size([2, 4096, 4])
tensor([[[0.1445, 0.2750, 0.1864,  ..., 0.2072, 0.0674, 0.4258],
         [0.1456, 0.3129, 0.4409,  ..., 0.2072, 0.3553, 0.1695],
         [0.5655, 0.2906, 0.1864,  ..., 0.3785, 0.5100, 0.2352],
         [0.1445, 0.1215, 0.1864,  ..., 0.2072, 0.0674, 0.1695]],
        [[0.2111, 0.2500, 0.1667,  ..., 0.1624, 0.2970, 0.2500],
         [0.2111, 0.2500, 0.3548,  ..., 0.1624, 0.2235, 0.2500],
         [0.2111, 0.2500, 0.1466,  ..., 0.1642, 0.2235, 0.2500],
         [0.3667, 0.2500, 0.3318,  ..., 0.5111, 0.2560, 0.2500]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 4096])
mask shape: torch.Size([2, 4096, 4])
shape of inputs: torch.Size([2, 4, 4096])
shape of targets: torch.Size([2, 4, 4096])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...