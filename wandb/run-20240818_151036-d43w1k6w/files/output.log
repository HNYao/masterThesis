2024-08-18 15:10:40,469 [Worker 0] Is distributed: False
2024-08-18 15:10:40,469 [Process: 0] Starting training
2024-08-18 15:10:40,469 [Process: 0] EPOCH 1:
2024-08-18 15:10:40,472 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:42,204 [Process: 0] Synchronize training processes
2024-08-18 15:10:42,204 [Process: 0] Evaluating...
2024-08-18 15:10:42,208 [Process: 0] EPOCH 2:
2024-08-18 15:10:42,210 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.6122, 0.4697, 0.2048,  ..., 0.2305, 0.3274, 0.1983],
         [0.1293, 0.1783, 0.2048,  ..., 0.4168, 0.2242, 0.4050],
         [0.1293, 0.1389, 0.3567,  ..., 0.1544, 0.2242, 0.1983],
         [0.1293, 0.2131, 0.2337,  ..., 0.1983, 0.2242, 0.1983]],
        [[0.3803, 0.2671, 0.7249,  ..., 0.2031, 0.1584, 0.1903],
         [0.2066, 0.2211, 0.0917,  ..., 0.2745, 0.5247, 0.4292],
         [0.2066, 0.2335, 0.0917,  ..., 0.3193, 0.1584, 0.1903],
         [0.2066, 0.2783, 0.0917,  ..., 0.2031, 0.1584, 0.1903]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2151, 0.2692, 0.3814,  ..., 0.2139, 0.2773, 0.3690],
         [0.3724, 0.2391, 0.2068,  ..., 0.3342, 0.2107, 0.1599],
         [0.2063, 0.2227, 0.1767,  ..., 0.2381, 0.2107, 0.1508],
         [0.2063, 0.2691, 0.2351,  ..., 0.2139, 0.3013, 0.3203]],
        [[0.2504, 0.3937, 0.2321,  ..., 0.3676, 0.2387, 0.2340],
         [0.2566, 0.2037, 0.3038,  ..., 0.2318, 0.2401, 0.3072],
         [0.2317, 0.1770, 0.2321,  ..., 0.2003, 0.2675, 0.2294],
         [0.2612, 0.2256, 0.2321,  ..., 0.2003, 0.2536, 0.2294]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:43,278 [Process: 0] Synchronize training processes
2024-08-18 15:10:43,279 [Process: 0] Evaluating...
2024-08-18 15:10:43,281 [Process: 0] EPOCH 3:
2024-08-18 15:10:43,283 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:44,345 [Process: 0] Synchronize training processes
2024-08-18 15:10:44,345 [Process: 0] Evaluating...
2024-08-18 15:10:44,347 [Process: 0] EPOCH 4:
2024-08-18 15:10:44,349 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2954, 0.3475, 0.2777,  ..., 0.1873, 0.2600, 0.2697],
         [0.2554, 0.1973, 0.2181,  ..., 0.1873, 0.2712, 0.2449],
         [0.2106, 0.1856, 0.1918,  ..., 0.4381, 0.2008, 0.1760],
         [0.2386, 0.2696, 0.3124,  ..., 0.1873, 0.2680, 0.3094]],
        [[0.2921, 0.2146, 0.2179,  ..., 0.2408, 0.2650, 0.3133],
         [0.2223, 0.3733, 0.2179,  ..., 0.2762, 0.2704, 0.2424],
         [0.2223, 0.2060, 0.3462,  ..., 0.2111, 0.1762, 0.2077],
         [0.2634, 0.2060, 0.2179,  ..., 0.2719, 0.2883, 0.2365]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2775, 0.3152, 0.0758,  ..., 0.2912, 0.3253, 0.2084],
         [0.2331, 0.2569, 0.6697,  ..., 0.2549, 0.2021, 0.2084],
         [0.2003, 0.1606, 0.1787,  ..., 0.1803, 0.1590, 0.3749],
         [0.2891, 0.2673, 0.0758,  ..., 0.2735, 0.3136, 0.2084]],
        [[0.2924, 0.3325, 0.3310,  ..., 0.1055, 0.2219, 0.2988],
         [0.2409, 0.2036, 0.2435,  ..., 0.1055, 0.2634, 0.2298],
         [0.1681, 0.2036, 0.1857,  ..., 0.6834, 0.2928, 0.1900],
         [0.2986, 0.2602, 0.2398,  ..., 0.1055, 0.2219, 0.2814]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2219, 0.3102, 0.3009,  ..., 0.2638, 0.2360, 0.3055],
         [0.2219, 0.2278, 0.2293,  ..., 0.2885, 0.2294, 0.2438],
         [0.3342, 0.2092, 0.1999,  ..., 0.1986, 0.2981, 0.2011],
         [0.2219, 0.2529, 0.2699,  ..., 0.2491, 0.2365, 0.2496]],
        [[0.0544, 0.2413, 0.3275,  ..., 0.3497, 0.1637, 0.2962],
         [0.0544, 0.3076, 0.2199,  ..., 0.2068, 0.1767, 0.2374],
         [0.8367, 0.1614, 0.1862,  ..., 0.1654, 0.4960, 0.1904],
         [0.0544, 0.2896, 0.2664,  ..., 0.2781, 0.1637, 0.2760]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2988, 0.3552, 0.2074,  ..., 0.3357, 0.3548, 0.1822],
         [0.2141, 0.2401, 0.2457,  ..., 0.2117, 0.2432, 0.1822],
         [0.2023, 0.1502, 0.3394,  ..., 0.1609, 0.1531, 0.4535],
         [0.2848, 0.2544, 0.2074,  ..., 0.2918, 0.2489, 0.1822]],
        [[0.3840, 0.3099, 0.2987,  ..., 0.3206, 0.3157, 0.2965],
         [0.2321, 0.2087, 0.2180,  ..., 0.2197, 0.2369, 0.2768],
         [0.1720, 0.1672, 0.1507,  ..., 0.1726, 0.1568, 0.1830],
         [0.2119, 0.3142, 0.3326,  ..., 0.2871, 0.2905, 0.2438]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:10:45,411 [Process: 0] Synchronize training processes
2024-08-18 15:10:45,411 [Process: 0] Evaluating...
2024-08-18 15:10:45,413 [Process: 0] EPOCH 5:
2024-08-18 15:10:45,414 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:46,478 [Process: 0] Synchronize training processes
2024-08-18 15:10:46,478 [Process: 0] Evaluating...
2024-08-18 15:10:46,480 [Process: 0] EPOCH 6:
2024-08-18 15:10:46,481 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 4:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3554, 0.4159, 0.1127,  ..., 0.3317, 0.3192, 0.3480],
         [0.1793, 0.1936, 0.1127,  ..., 0.1880, 0.1672, 0.1627],
         [0.1186, 0.1239, 0.6620,  ..., 0.1840, 0.1371, 0.1239],
         [0.3466, 0.2667, 0.1127,  ..., 0.2963, 0.3765, 0.3654]],
        [[0.1590, 0.3759, 0.4015,  ..., 0.1855, 0.1766, 0.3232],
         [0.1854, 0.1525, 0.1836,  ..., 0.1855, 0.1784, 0.1848],
         [0.4966, 0.1525, 0.1518,  ..., 0.4436, 0.4684, 0.1561],
         [0.1590, 0.3191, 0.2631,  ..., 0.1855, 0.1766, 0.3359]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4349, 0.3207, 0.1695,  ..., 0.3841, 0.3697, 0.0213],
         [0.1430, 0.1351, 0.1695,  ..., 0.1362, 0.1521, 0.0213],
         [0.1288, 0.1351, 0.4915,  ..., 0.1262, 0.1249, 0.9360],
         [0.2934, 0.4092, 0.1695,  ..., 0.3534, 0.3534, 0.0213]],
        [[0.3218, 0.3816, 0.4157,  ..., 0.3451, 0.1478, 0.1419],
         [0.1645, 0.1331, 0.1754,  ..., 0.1723, 0.2786, 0.1767],
         [0.1645, 0.1331, 0.1597,  ..., 0.1723, 0.4257, 0.5395],
         [0.3492, 0.3522, 0.2493,  ..., 0.3103, 0.1478, 0.1419]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 5:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4042, 0.3963, 0.3322,  ..., 0.1741, 0.1878, 0.3702],
         [0.1401, 0.1339, 0.1852,  ..., 0.1741, 0.2015, 0.1561],
         [0.1401, 0.1318, 0.1823,  ..., 0.4777, 0.4229, 0.1208],
         [0.3155, 0.3380, 0.3002,  ..., 0.1741, 0.1878, 0.3528]],
        [[0.2338, 0.3892, 0.3438,  ..., 0.2029, 0.1809, 0.3584],
         [0.2338, 0.1290, 0.1479,  ..., 0.2029, 0.1947, 0.1968],
         [0.2987, 0.1246, 0.1331,  ..., 0.3913, 0.4435, 0.1351],
         [0.2338, 0.3572, 0.3752,  ..., 0.2029, 0.1809, 0.3097]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:10:47,546 [Process: 0] Synchronize training processes
2024-08-18 15:10:47,546 [Process: 0] Evaluating...
2024-08-18 15:10:47,548 [Process: 0] EPOCH 7:
2024-08-18 15:10:47,550 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:48,615 [Process: 0] Synchronize training processes
2024-08-18 15:10:48,616 [Process: 0] Evaluating...
2024-08-18 15:10:48,617 [Process: 0] EPOCH 8:
2024-08-18 15:10:48,619 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2895, 0.4675, 0.0501,  ..., 0.3843, 0.4884, 0.1385],
         [0.2274, 0.1477, 0.0501,  ..., 0.1597, 0.1321, 0.1385],
         [0.1687, 0.1155, 0.8497,  ..., 0.1221, 0.1124, 0.5846],
         [0.3144, 0.2693, 0.0501,  ..., 0.3339, 0.2672, 0.1385]],
        [[0.4057, 0.4594, 0.3483,  ..., 0.3409, 0.3350, 0.3744],
         [0.1258, 0.1528, 0.1471,  ..., 0.1523, 0.1822, 0.1524],
         [0.0970, 0.1258, 0.1305,  ..., 0.1147, 0.1515, 0.1469],
         [0.3716, 0.2621, 0.3741,  ..., 0.3921, 0.3313, 0.3263]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 6:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3697, 0.3483, 0.3714,  ..., 0.1348, 0.1405, 0.4060],
         [0.1960, 0.1447, 0.1791,  ..., 0.1348, 0.1676, 0.1568],
         [0.1387, 0.1096, 0.1528,  ..., 0.5956, 0.5514, 0.1326],
         [0.2956, 0.3973, 0.2967,  ..., 0.1348, 0.1405, 0.3046]],
        [[0.3518, 0.4181, 0.3529,  ..., 0.1963, 0.4256, 0.4090],
         [0.1862, 0.1194, 0.1260,  ..., 0.1963, 0.1469, 0.1455],
         [0.1625, 0.0910, 0.1098,  ..., 0.4111, 0.0990, 0.1171],
         [0.2995, 0.3715, 0.4113,  ..., 0.1963, 0.3285, 0.3283]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2797, 0.3675, 0.1879,  ..., 0.3969, 0.4134, 0.0096],
         [0.2124, 0.1771, 0.2151,  ..., 0.1506, 0.1304, 0.0096],
         [0.1961, 0.1419, 0.4090,  ..., 0.1364, 0.1255, 0.9713],
         [0.3118, 0.3135, 0.1879,  ..., 0.3160, 0.3307, 0.0096]],
        [[0.3557, 0.3769, 0.3586,  ..., 0.2919, 0.2644, 0.3640],
         [0.1739, 0.1867, 0.1806,  ..., 0.1628, 0.2075, 0.1680],
         [0.1378, 0.1543, 0.1499,  ..., 0.1331, 0.1609, 0.1485],
         [0.3326, 0.2821, 0.3109,  ..., 0.4122, 0.3672, 0.3194]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 7:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3179, 0.4096, 0.3917,  ..., 0.0993, 0.2063, 0.2926],
         [0.1600, 0.1649, 0.1344,  ..., 0.0993, 0.2203, 0.1900],
         [0.1309, 0.1382, 0.1004,  ..., 0.7021, 0.3670, 0.1590],
         [0.3912, 0.2873, 0.3736,  ..., 0.0993, 0.2063, 0.3585]],
        [[0.2819, 0.4365, 0.3765,  ..., 0.1653, 0.3976, 0.2850],
         [0.2026, 0.1534, 0.1790,  ..., 0.1653, 0.1321, 0.2095],
         [0.2026, 0.1168, 0.1579,  ..., 0.5040, 0.0984, 0.1525],
         [0.3128, 0.2933, 0.2865,  ..., 0.1653, 0.3719, 0.3531]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:10:49,684 [Process: 0] Synchronize training processes
2024-08-18 15:10:49,684 [Process: 0] Evaluating...
2024-08-18 15:10:49,686 [Process: 0] EPOCH 9:
2024-08-18 15:10:49,688 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:50,749 [Process: 0] Synchronize training processes
2024-08-18 15:10:50,749 [Process: 0] Evaluating...
2024-08-18 15:10:50,751 [Process: 0] EPOCH 10:
2024-08-18 15:10:50,753 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3343, 0.3731, 0.1535,  ..., 0.3735, 0.4377, 0.1818],
         [0.1881, 0.1719, 0.1535,  ..., 0.1490, 0.1363, 0.1818],
         [0.1679, 0.1631, 0.5396,  ..., 0.1340, 0.1262, 0.4545],
         [0.3097, 0.2919, 0.1535,  ..., 0.3435, 0.2999, 0.1818]],
        [[0.3932, 0.4590, 0.4167,  ..., 0.3726, 0.2785, 0.0774],
         [0.1270, 0.1148, 0.1564,  ..., 0.1284, 0.2345, 0.0839],
         [0.1270, 0.0932, 0.1502,  ..., 0.1160, 0.2203, 0.7612],
         [0.3529, 0.3330, 0.2767,  ..., 0.3829, 0.2668, 0.0774]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 8:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2552, 0.4695, 0.4029,  ..., 0.0590, 0.2742, 0.4280],
         [0.2287, 0.1147, 0.1346,  ..., 0.0590, 0.2348, 0.1036],
         [0.2445, 0.1147, 0.1346,  ..., 0.8231, 0.2226, 0.1027],
         [0.2716, 0.3012, 0.3279,  ..., 0.0590, 0.2684, 0.3657]],
        [[0.3321, 0.3829, 0.2911,  ..., 0.1753, 0.4010, 0.3580],
         [0.1860, 0.1452, 0.1730,  ..., 0.1758, 0.1156, 0.1541],
         [0.1860, 0.1302, 0.1570,  ..., 0.4737, 0.1027, 0.1341],
         [0.2960, 0.3417, 0.3789,  ..., 0.1753, 0.3808, 0.3538]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3133, 0.3589, 0.2773,  ..., 0.3039, 0.3655, 0.2260],
         [0.1809, 0.1598, 0.1725,  ..., 0.1667, 0.1519, 0.2260],
         [0.1809, 0.1564, 0.1675,  ..., 0.1667, 0.1488, 0.3221],
         [0.3250, 0.3248, 0.3826,  ..., 0.3628, 0.3337, 0.2260]],
        [[0.4610, 0.4617, 0.4676,  ..., 0.4150, 0.4292, 0.1084],
         [0.1217, 0.1090, 0.1287,  ..., 0.0930, 0.0663, 0.1168],
         [0.1094, 0.1029, 0.1287,  ..., 0.0899, 0.0626, 0.6664],
         [0.3079, 0.3264, 0.2749,  ..., 0.4021, 0.4419, 0.1084]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 9:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4186, 0.4417, 0.5064,  ..., 0.1185, 0.2689, 0.3537],
         [0.0693, 0.1234, 0.0599,  ..., 0.1198, 0.2013, 0.1169],
         [0.0664, 0.1102, 0.0559,  ..., 0.6432, 0.1955, 0.1008],
         [0.4457, 0.3247, 0.3778,  ..., 0.1185, 0.3343, 0.4286]],
        [[0.2610, 0.3891, 0.2276,  ..., 0.1151, 0.2513, 0.2861],
         [0.2399, 0.1334, 0.2272,  ..., 0.1295, 0.2319, 0.2117],
         [0.2423, 0.1283, 0.3137,  ..., 0.6403, 0.2425, 0.2117],
         [0.2569, 0.3492, 0.2315,  ..., 0.1151, 0.2743, 0.2906]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:10:51,815 [Process: 0] Synchronize training processes
2024-08-18 15:10:51,815 [Process: 0] Evaluating...
2024-08-18 15:10:51,817 [Process: 0] EPOCH 11:
2024-08-18 15:10:51,819 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2403, 0.4459, 0.3770,  ..., 0.1079, 0.3997, 0.2358],
         [0.2403, 0.0873, 0.1064,  ..., 0.1156, 0.1206, 0.2197],
         [0.2791, 0.0873, 0.1064,  ..., 0.6685, 0.1206, 0.3247],
         [0.2403, 0.3796, 0.4103,  ..., 0.1079, 0.3591, 0.2197]],
        [[0.3980, 0.3650, 0.3682,  ..., 0.4383, 0.4010, 0.1250],
         [0.1037, 0.1390, 0.1319,  ..., 0.1237, 0.1196, 0.1557],
         [0.1037, 0.1335, 0.1211,  ..., 0.1237, 0.1147, 0.5943],
         [0.3946, 0.3624, 0.3787,  ..., 0.3143, 0.3647, 0.1250]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 10:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3345, 0.2930, 0.4067,  ..., 0.0938, 0.1627, 0.3431],
         [0.1251, 0.1419, 0.1137,  ..., 0.0938, 0.1627, 0.1588],
         [0.1243, 0.1419, 0.1137,  ..., 0.7185, 0.5118, 0.1588],
         [0.4162, 0.4233, 0.3659,  ..., 0.0938, 0.1627, 0.3394]],
        [[0.2225, 0.3944, 0.4016,  ..., 0.1008, 0.3152, 0.4303],
         [0.2225, 0.1625, 0.1359,  ..., 0.1008, 0.1315, 0.1396],
         [0.3326, 0.1585, 0.1359,  ..., 0.6977, 0.1194, 0.1396],
         [0.2225, 0.2846, 0.3266,  ..., 0.1008, 0.4339, 0.2905]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2061, 0.4435, 0.3752,  ..., 0.1530, 0.3715, 0.8883],
         [0.2061, 0.0855, 0.1213,  ..., 0.1530, 0.1091, 0.0372],
         [0.3816, 0.0855, 0.1204,  ..., 0.5411, 0.1091, 0.0372],
         [0.2061, 0.3855, 0.3831,  ..., 0.1530, 0.4103, 0.0372]],
        [[0.3929, 0.3260, 0.3359,  ..., 0.4616, 0.3864, 0.1557],
         [0.1369, 0.1158, 0.1185,  ..., 0.1199, 0.1167, 0.1557],
         [0.1369, 0.1158, 0.1049,  ..., 0.1199, 0.1167, 0.5330],
         [0.3333, 0.4424, 0.4407,  ..., 0.2986, 0.3801, 0.1557]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 11:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4472, 0.4246, 0.4554,  ..., 0.0966, 0.1386, 0.4008],
         [0.1283, 0.1315, 0.1173,  ..., 0.0966, 0.1386, 0.1216],
         [0.1283, 0.1315, 0.1173,  ..., 0.7103, 0.5841, 0.1177],
         [0.2963, 0.3125, 0.3100,  ..., 0.0966, 0.1386, 0.3599]],
        [[0.2242, 0.3133, 0.3716,  ..., 0.1091, 0.3341, 0.4501],
         [0.2242, 0.1235, 0.1496,  ..., 0.1091, 0.1373, 0.0873],
         [0.3275, 0.1157, 0.1343,  ..., 0.6727, 0.1373, 0.0873],
         [0.2242, 0.4475, 0.3445,  ..., 0.1091, 0.3914, 0.3753]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:10:52,881 [Process: 0] Synchronize training processes
2024-08-18 15:10:52,881 [Process: 0] Evaluating...
2024-08-18 15:10:52,885 [Process: 0] EPOCH 12:
2024-08-18 15:10:52,887 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:53,951 [Process: 0] Synchronize training processes
2024-08-18 15:10:53,951 [Process: 0] Evaluating...
2024-08-18 15:10:53,953 [Process: 0] EPOCH 13:
2024-08-18 15:10:53,955 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2123, 0.4537, 0.3650,  ..., 0.1058, 0.3584, 0.2754],
         [0.2123, 0.1160, 0.1270,  ..., 0.1058, 0.0914, 0.1700],
         [0.3630, 0.1160, 0.1270,  ..., 0.6825, 0.0807, 0.3846],
         [0.2123, 0.3143, 0.3809,  ..., 0.1058, 0.4694, 0.1700]],
        [[0.3367, 0.4308, 0.3994,  ..., 0.3951, 0.4331, 0.1283],
         [0.1442, 0.1389, 0.1145,  ..., 0.1086, 0.1178, 0.1283],
         [0.1422, 0.1288, 0.1096,  ..., 0.1067, 0.1111, 0.6150],
         [0.3768, 0.3016, 0.3765,  ..., 0.3897, 0.3381, 0.1283]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 12:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4057, 0.3318, 0.3500,  ..., 0.1387, 0.2851, 0.3658],
         [0.1321, 0.1577, 0.1307,  ..., 0.1387, 0.1474, 0.1207],
         [0.1196, 0.1577, 0.1307,  ..., 0.5838, 0.1471, 0.1114],
         [0.3427, 0.3528, 0.3887,  ..., 0.1387, 0.4203, 0.4020]],
        [[0.2192, 0.5091, 0.4085,  ..., 0.0867, 0.2010, 0.4060],
         [0.2192, 0.1206, 0.1434,  ..., 0.0867, 0.2010, 0.1332],
         [0.3425, 0.1206, 0.1349,  ..., 0.7399, 0.3969, 0.1276],
         [0.2192, 0.2498, 0.3132,  ..., 0.0867, 0.2010, 0.3332]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0728, 0.4894, 0.4177,  ..., 0.1784, 0.4012, 0.0974],
         [0.0728, 0.1078, 0.0877,  ..., 0.1784, 0.0844, 0.0974],
         [0.7815, 0.1078, 0.0877,  ..., 0.4649, 0.0844, 0.7077],
         [0.0728, 0.2951, 0.4069,  ..., 0.1784, 0.4300, 0.0974]],
        [[0.2449, 0.3706, 0.4433,  ..., 0.4025, 0.3541, 0.1240],
         [0.2176, 0.1141, 0.1221,  ..., 0.0979, 0.1337, 0.1240],
         [0.2266, 0.1141, 0.1218,  ..., 0.0979, 0.1337, 0.6281],
         [0.3110, 0.4012, 0.3128,  ..., 0.4017, 0.3784, 0.1240]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 13:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
2024-08-18 15:10:55,032 [Process: 0] Synchronize training processes
2024-08-18 15:10:55,032 [Process: 0] Evaluating...
2024-08-18 15:10:55,034 [Process: 0] EPOCH 14:
2024-08-18 15:10:55,037 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:56,099 [Process: 0] Synchronize training processes
2024-08-18 15:10:56,100 [Process: 0] Evaluating...
2024-08-18 15:10:56,102 [Process: 0] EPOCH 15:
2024-08-18 15:10:56,104 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4664, 0.4622, 0.3974,  ..., 0.0846, 0.2319, 0.3848],
         [0.1283, 0.0982, 0.1445,  ..., 0.0846, 0.2319, 0.1038],
         [0.1283, 0.0982, 0.1445,  ..., 0.7461, 0.2838, 0.1038],
         [0.2770, 0.3414, 0.3136,  ..., 0.0846, 0.2525, 0.4077]],
        [[0.2266, 0.4801, 0.2253,  ..., 0.1087, 0.1877, 0.3589],
         [0.2266, 0.0887, 0.2253,  ..., 0.1087, 0.1877, 0.1758],
         [0.3202, 0.0887, 0.3135,  ..., 0.6739, 0.4370, 0.1758],
         [0.2266, 0.3424, 0.2359,  ..., 0.1087, 0.1877, 0.2895]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1003, 0.3887, 0.4110,  ..., 0.1779, 0.4864, 0.1284],
         [0.1003, 0.1407, 0.1015,  ..., 0.1779, 0.1144, 0.1284],
         [0.6990, 0.1407, 0.1015,  ..., 0.4663, 0.1144, 0.6149],
         [0.1003, 0.3300, 0.3860,  ..., 0.1779, 0.2848, 0.1284]],
        [[0.1345, 0.4471, 0.3399,  ..., 0.3606, 0.3541, 0.1257],
         [0.1345, 0.0878, 0.1015,  ..., 0.1219, 0.1402, 0.1257],
         [0.5964, 0.0878, 0.1015,  ..., 0.1219, 0.1402, 0.6229],
         [0.1345, 0.3773, 0.4570,  ..., 0.3956, 0.3654, 0.1257]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 14:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3144, 0.3660, 0.3459,  ..., 0.0670, 0.1503, 0.3410],
         [0.1562, 0.1220, 0.1650,  ..., 0.0670, 0.1503, 0.1155],
         [0.1562, 0.1220, 0.1650,  ..., 0.7991, 0.5491, 0.1155],
         [0.3732, 0.3899, 0.3242,  ..., 0.0670, 0.1503, 0.4280]],
        [[0.1964, 0.3694, 0.4650,  ..., 0.1351, 0.2759, 0.3414],
         [0.1964, 0.1056, 0.0710,  ..., 0.1351, 0.1413, 0.0984],
         [0.4107, 0.1056, 0.0710,  ..., 0.5946, 0.1413, 0.0984],
         [0.1964, 0.4194, 0.3929,  ..., 0.1351, 0.4415, 0.4618]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0520, 0.4001, 0.5048,  ..., 0.1529, 0.4219, 0.1321],
         [0.0520, 0.1120, 0.0741,  ..., 0.1529, 0.1017, 0.1321],
         [0.8441, 0.1120, 0.0741,  ..., 0.5412, 0.1017, 0.6038],
         [0.0520, 0.3759, 0.3471,  ..., 0.1529, 0.3747, 0.1321]],
        [[0.1689, 0.4799, 0.4268,  ..., 0.3494, 0.5029, 0.1707],
         [0.1689, 0.0874, 0.1014,  ..., 0.0915, 0.1112, 0.1707],
         [0.4933, 0.0874, 0.1014,  ..., 0.0915, 0.1112, 0.4879],
         [0.1689, 0.3453, 0.3705,  ..., 0.4675, 0.2747, 0.1707]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 15:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:57,166 [Process: 0] Synchronize training processes
2024-08-18 15:10:57,167 [Process: 0] Evaluating...
2024-08-18 15:10:57,168 [Process: 0] EPOCH 16:
2024-08-18 15:10:57,170 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:58,234 [Process: 0] Synchronize training processes
2024-08-18 15:10:58,234 [Process: 0] Evaluating...
2024-08-18 15:10:58,236 [Process: 0] EPOCH 17:
2024-08-18 15:10:58,238 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4590, 0.4441, 0.4415,  ..., 0.0602, 0.1349, 0.3840],
         [0.0997, 0.1328, 0.1043,  ..., 0.0602, 0.1349, 0.1005],
         [0.0997, 0.1328, 0.1043,  ..., 0.8194, 0.5954, 0.1005],
         [0.3417, 0.2904, 0.3500,  ..., 0.0602, 0.1349, 0.4150]],
        [[0.2904, 0.3817, 0.4512,  ..., 0.1029, 0.1491, 0.3910],
         [0.1954, 0.1246, 0.1107,  ..., 0.1047, 0.1491, 0.1242],
         [0.1954, 0.1246, 0.1107,  ..., 0.6895, 0.5527, 0.1242],
         [0.3189, 0.3691, 0.3273,  ..., 0.1029, 0.1491, 0.3606]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1537, 0.4982, 0.4121,  ..., 0.1617, 0.3924, 0.1200],
         [0.1537, 0.1118, 0.1382,  ..., 0.1617, 0.1191, 0.1200],
         [0.5388, 0.1118, 0.1382,  ..., 0.5150, 0.1191, 0.6400],
         [0.1537, 0.2782, 0.3116,  ..., 0.1617, 0.3693, 0.1200]],
        [[0.2695, 0.6529, 0.5548,  ..., 0.6532, 0.4539, 0.1528],
         [0.1775, 0.0614, 0.0861,  ..., 0.0780, 0.0910, 0.1528],
         [0.1775, 0.0614, 0.0861,  ..., 0.0780, 0.0910, 0.5416],
         [0.3756, 0.2244, 0.2729,  ..., 0.1907, 0.3641, 0.1528]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 16:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3429, 0.4384, 0.4641,  ..., 0.0559, 0.1102, 0.4355],
         [0.1164, 0.0910, 0.0829,  ..., 0.0559, 0.1102, 0.0967],
         [0.1164, 0.0910, 0.0829,  ..., 0.8324, 0.6695, 0.0967],
         [0.4243, 0.3796, 0.3701,  ..., 0.0559, 0.1102, 0.3711]],
        [[0.3932, 0.3374, 0.5025,  ..., 0.0965, 0.1676, 0.4636],
         [0.1630, 0.1320, 0.0865,  ..., 0.0965, 0.1676, 0.0793],
         [0.1630, 0.1320, 0.0865,  ..., 0.7106, 0.4972, 0.0793],
         [0.2809, 0.3985, 0.3245,  ..., 0.0965, 0.1676, 0.3778]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0935, 0.3666, 0.4425,  ..., 0.3911, 0.4601, 0.1466],
         [0.0935, 0.1246, 0.0888,  ..., 0.1138, 0.0863, 0.1466],
         [0.7194, 0.1246, 0.0888,  ..., 0.1138, 0.0863, 0.5601],
         [0.0935, 0.3843, 0.3799,  ..., 0.3812, 0.3672, 0.1466]],
        [[0.0966, 0.4070, 0.3632,  ..., 0.2603, 0.3653, 0.1205],
         [0.0966, 0.1100, 0.1267,  ..., 0.1706, 0.1244, 0.1205],
         [0.7102, 0.1100, 0.1267,  ..., 0.1706, 0.1244, 0.6386],
         [0.0966, 0.3730, 0.3833,  ..., 0.3985, 0.3859, 0.1205]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 17:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:10:59,305 [Process: 0] Synchronize training processes
2024-08-18 15:10:59,305 [Process: 0] Evaluating...
2024-08-18 15:10:59,307 [Process: 0] EPOCH 18:
2024-08-18 15:10:59,309 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3433, 0.4909, 0.3737,  ..., 0.0757, 0.0726, 0.3392],
         [0.1590, 0.0928, 0.1426,  ..., 0.0757, 0.0726, 0.1448],
         [0.1590, 0.0928, 0.1426,  ..., 0.7729, 0.7822, 0.1448],
         [0.3387, 0.3235, 0.3411,  ..., 0.0757, 0.0726, 0.3713]],
        [[0.5651, 0.3931, 0.4193,  ..., 0.0908, 0.1704, 0.3752],
         [0.0858, 0.1005, 0.1104,  ..., 0.0908, 0.1704, 0.1239],
         [0.0858, 0.1005, 0.1104,  ..., 0.7277, 0.4887, 0.1239],
         [0.2632, 0.4059, 0.3599,  ..., 0.0908, 0.1704, 0.3770]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1159, 0.5303, 0.3680,  ..., 0.3523, 0.3895, 0.1267],
         [0.1159, 0.0930, 0.1232,  ..., 0.1320, 0.0807, 0.1267],
         [0.6524, 0.0930, 0.1232,  ..., 0.1320, 0.0807, 0.6198],
         [0.1159, 0.2837, 0.3857,  ..., 0.3838, 0.4490, 0.1267]],
        [[0.1096, 0.3724, 0.4170,  ..., 0.4481, 0.3210, 0.1119],
         [0.1096, 0.0905, 0.0799,  ..., 0.0739, 0.1349, 0.1119],
         [0.6711, 0.0905, 0.0799,  ..., 0.0739, 0.1349, 0.6644],
         [0.1096, 0.4466, 0.4233,  ..., 0.4041, 0.4093, 0.1119]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 18:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3840, 0.3468, 0.5107,  ..., 0.0296, 0.1047, 0.4073],
         [0.1136, 0.0994, 0.1015,  ..., 0.0296, 0.1047, 0.1364],
         [0.1136, 0.0994, 0.1015,  ..., 0.9112, 0.6860, 0.1364],
         [0.3888, 0.4545, 0.2863,  ..., 0.0296, 0.1047, 0.3199]],
        [[0.4369, 0.4017, 0.3911,  ..., 0.1046, 0.0925, 0.4580],
         [0.1518, 0.0961, 0.1214,  ..., 0.1046, 0.0925, 0.0808],
         [0.1518, 0.0961, 0.1214,  ..., 0.6863, 0.7224, 0.0808],
         [0.2594, 0.4060, 0.3661,  ..., 0.1046, 0.0925, 0.3804]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0549, 0.4354, 0.4162,  ..., 0.1370, 0.3260, 0.1352],
         [0.0549, 0.0975, 0.1038,  ..., 0.1370, 0.1074, 0.1352],
         [0.8352, 0.0975, 0.1038,  ..., 0.5889, 0.1074, 0.5945],
         [0.0549, 0.3696, 0.3761,  ..., 0.1370, 0.4591, 0.1352]],
        [[0.1313, 0.4925, 0.5698,  ..., 0.4924, 0.4763, 0.0962],
         [0.1313, 0.0944, 0.0690,  ..., 0.0895, 0.0800, 0.0962],
         [0.6062, 0.0944, 0.0690,  ..., 0.0895, 0.0800, 0.7115],
         [0.1313, 0.3186, 0.2922,  ..., 0.3286, 0.3637, 0.0962]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 19:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:00,374 [Process: 0] Synchronize training processes
2024-08-18 15:11:00,375 [Process: 0] Evaluating...
2024-08-18 15:11:00,377 [Process: 0] EPOCH 19:
2024-08-18 15:11:00,378 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:01,442 [Process: 0] Synchronize training processes
2024-08-18 15:11:01,443 [Process: 0] Evaluating...
2024-08-18 15:11:01,444 [Process: 0] EPOCH 20:
2024-08-18 15:11:01,446 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3839, 0.5039, 0.4739,  ..., 0.0466, 0.0787, 0.4375],
         [0.0978, 0.1018, 0.1025,  ..., 0.0466, 0.0787, 0.1088],
         [0.0978, 0.1018, 0.1025,  ..., 0.8603, 0.7639, 0.1088],
         [0.4205, 0.2926, 0.3212,  ..., 0.0466, 0.0787, 0.3449]],
        [[0.6720, 0.4795, 0.2378,  ..., 0.0723, 0.0835, 0.3727],
         [0.0726, 0.0992, 0.1349,  ..., 0.0723, 0.0835, 0.1244],
         [0.0726, 0.0992, 0.1349,  ..., 0.7832, 0.7494, 0.1244],
         [0.1828, 0.3220, 0.4924,  ..., 0.0723, 0.0835, 0.3785]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0941, 0.3640, 0.4242,  ..., 0.0915, 0.1867, 0.0902],
         [0.0941, 0.1107, 0.1081,  ..., 0.0915, 0.1867, 0.0902],
         [0.7177, 0.1107, 0.1081,  ..., 0.7256, 0.3264, 0.7293],
         [0.0941, 0.4146, 0.3595,  ..., 0.0915, 0.3001, 0.0902]],
        [[0.0972, 0.6703, 0.4618,  ..., 0.3966, 0.3722, 0.1291],
         [0.0972, 0.0684, 0.0900,  ..., 0.1186, 0.1378, 0.1291],
         [0.7085, 0.0684, 0.0900,  ..., 0.1186, 0.1378, 0.6126],
         [0.0972, 0.1930, 0.3583,  ..., 0.3663, 0.3522, 0.1291]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 20:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2864, 0.6203, 0.4870,  ..., 0.0705, 0.1339, 0.4393],
         [0.1115, 0.0764, 0.0895,  ..., 0.0705, 0.1339, 0.0918],
         [0.1115, 0.0764, 0.0895,  ..., 0.7886, 0.5982, 0.0918],
         [0.4906, 0.2269, 0.3341,  ..., 0.0705, 0.1339, 0.3771]],
        [[0.4362, 0.5103, 0.5322,  ..., 0.0855, 0.1045, 0.4577],
         [0.1430, 0.0783, 0.0920,  ..., 0.0855, 0.1045, 0.0884],
         [0.1430, 0.0783, 0.0920,  ..., 0.7435, 0.6864, 0.0884],
         [0.2778, 0.3331, 0.2839,  ..., 0.0855, 0.1045, 0.3656]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
2024-08-18 15:11:02,515 [Process: 0] Synchronize training processes
2024-08-18 15:11:02,515 [Process: 0] Evaluating...
2024-08-18 15:11:02,517 [Process: 0] EPOCH 21:
2024-08-18 15:11:02,519 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:03,583 [Process: 0] Synchronize training processes
2024-08-18 15:11:03,584 [Process: 0] Evaluating...
2024-08-18 15:11:03,588 [Process: 0] EPOCH 22:
2024-08-18 15:11:03,590 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
tensor([[[0.0519, 0.4324, 0.6008,  ..., 0.4775, 0.4900, 0.0798],
         [0.0519, 0.0976, 0.0633,  ..., 0.0919, 0.0942, 0.0798],
         [0.8442, 0.0976, 0.0633,  ..., 0.0919, 0.0942, 0.7606],
         [0.0519, 0.3724, 0.2726,  ..., 0.3388, 0.3216, 0.0798]],
        [[0.1097, 0.2810, 0.3767,  ..., 0.1474, 0.2610, 0.0860],
         [0.1097, 0.0867, 0.0941,  ..., 0.1474, 0.0865, 0.0860],
         [0.6708, 0.0867, 0.0931,  ..., 0.5577, 0.0865, 0.7419],
         [0.1097, 0.5457, 0.4361,  ..., 0.1474, 0.5660, 0.0860]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 21:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.5108, 0.2447, 0.3893,  ..., 0.0650, 0.0881, 0.4543],
         [0.0955, 0.1234, 0.1201,  ..., 0.0650, 0.0881, 0.0981],
         [0.0955, 0.1234, 0.1201,  ..., 0.8050, 0.7358, 0.0981],
         [0.2983, 0.5084, 0.3705,  ..., 0.0650, 0.0881, 0.3495]],
        [[0.9228, 0.6993, 0.4621,  ..., 0.0542, 0.1313, 0.4614],
         [0.0242, 0.0702, 0.1187,  ..., 0.0542, 0.1313, 0.0893],
         [0.0242, 0.0702, 0.1187,  ..., 0.8375, 0.6061, 0.0893],
         [0.0288, 0.1603, 0.3006,  ..., 0.0542, 0.1313, 0.3600]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0926, 0.5926, 0.5953,  ..., 0.4965, 0.4574, 0.0986],
         [0.0926, 0.0846, 0.0957,  ..., 0.1047, 0.0837, 0.0986],
         [0.7221, 0.0846, 0.0957,  ..., 0.1047, 0.0837, 0.7041],
         [0.0926, 0.2381, 0.2133,  ..., 0.2941, 0.3753, 0.0986]],
        [[0.0804, 0.4252, 0.4361,  ..., 0.0756, 0.4727, 0.0709],
         [0.0804, 0.0925, 0.0856,  ..., 0.0882, 0.0986, 0.0709],
         [0.7589, 0.0925, 0.0856,  ..., 0.0756, 0.0986, 0.7872],
         [0.0804, 0.3898, 0.3927,  ..., 0.7607, 0.3301, 0.0709]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 22:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.5293, 0.1885, 0.1259,  ..., 0.0686, 0.1131, 0.0599],
         [0.0990, 0.1510, 0.1309,  ..., 0.0686, 0.1131, 0.0632],
         [0.0990, 0.1251, 0.1200,  ..., 0.7942, 0.6608, 0.0546],
         [0.2728, 0.5354, 0.6233,  ..., 0.0686, 0.1131, 0.8223]],
        [[0.8625, 0.2195, 0.3815,  ..., 0.0480, 0.1042, 0.1454],
         [0.0434, 0.1342, 0.1227,  ..., 0.0480, 0.1042, 0.1320],
         [0.0434, 0.1261, 0.1227,  ..., 0.8561, 0.6874, 0.1320],
         [0.0507, 0.5202, 0.3731,  ..., 0.0480, 0.1042, 0.5907]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:04,656 [Process: 0] Synchronize training processes
2024-08-18 15:11:04,656 [Process: 0] Evaluating...
2024-08-18 15:11:04,658 [Process: 0] EPOCH 23:
2024-08-18 15:11:04,660 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:05,731 [Process: 0] Synchronize training processes
2024-08-18 15:11:05,732 [Process: 0] Evaluating...
2024-08-18 15:11:05,733 [Process: 0] EPOCH 24:
2024-08-18 15:11:05,735 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1559, 0.4021, 0.0828,  ..., 0.3092, 0.5178, 0.1779],
         [0.1577, 0.1191, 0.0671,  ..., 0.1204, 0.1014, 0.1632],
         [0.4641, 0.1191, 0.0671,  ..., 0.1204, 0.1014, 0.4957],
         [0.2223, 0.3598, 0.7829,  ..., 0.4501, 0.2793, 0.1632]],
        [[0.1134, 0.6217, 0.7828,  ..., 0.0531, 0.7488, 0.0656],
         [0.1134, 0.1111, 0.0724,  ..., 0.0531, 0.0837, 0.0656],
         [0.6599, 0.1111, 0.0724,  ..., 0.0531, 0.0837, 0.8032],
         [0.1134, 0.1561, 0.0724,  ..., 0.8407, 0.0837, 0.0656]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 23:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.7203, 0.8258, 0.7792,  ..., 0.0765, 0.0882, 0.7261],
         [0.0932, 0.0581, 0.0689,  ..., 0.0765, 0.0900, 0.0843],
         [0.0932, 0.0581, 0.0689,  ..., 0.7704, 0.7336, 0.0843],
         [0.0932, 0.0581, 0.0829,  ..., 0.0765, 0.0882, 0.1054]],
        [[0.9949, 0.0787, 0.1427,  ..., 0.1168, 0.0868, 0.0873],
         [0.0017, 0.0677, 0.1140,  ..., 0.1168, 0.0868, 0.0983],
         [0.0017, 0.0627, 0.1140,  ..., 0.6369, 0.7397, 0.0873],
         [0.0017, 0.7908, 0.6293,  ..., 0.1296, 0.0868, 0.7270]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0925, 0.7656, 0.7682,  ..., 0.8498, 0.6999, 0.0906],
         [0.1015, 0.0781, 0.0773,  ..., 0.0501, 0.0999, 0.1054],
         [0.7134, 0.0781, 0.0773,  ..., 0.0501, 0.0999, 0.7134],
         [0.0925, 0.0781, 0.0773,  ..., 0.0501, 0.1003, 0.0906]],
        [[0.0818, 0.1812, 0.1662,  ..., 0.0982, 0.0470, 0.0882],
         [0.0818, 0.0903, 0.0792,  ..., 0.0982, 0.0580, 0.0996],
         [0.7546, 0.0903, 0.0792,  ..., 0.1916, 0.0470, 0.7240],
         [0.0818, 0.6381, 0.6754,  ..., 0.6120, 0.8479, 0.0882]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 24:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4435, 0.5507, 0.7619,  ..., 0.0623, 0.0979, 0.7266],
         [0.1159, 0.1415, 0.0794,  ..., 0.0623, 0.0979, 0.0911],
         [0.1159, 0.1415, 0.0794,  ..., 0.8130, 0.7063, 0.0911],
         [0.3247, 0.1663, 0.0794,  ..., 0.0623, 0.0979, 0.0911]],
        [[0.1476, 0.6568, 0.6591,  ..., 0.1137, 0.0867, 0.0297],
         [0.1513, 0.1104, 0.1104,  ..., 0.1178, 0.0872, 0.0327],
         [0.4195, 0.1104, 0.1104,  ..., 0.6167, 0.7385, 0.0297],
         [0.2816, 0.1224, 0.1201,  ..., 0.1518, 0.0876, 0.9078]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:06,801 [Process: 0] Synchronize training processes
2024-08-18 15:11:06,801 [Process: 0] Evaluating...
2024-08-18 15:11:06,803 [Process: 0] EPOCH 25:
2024-08-18 15:11:06,805 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:07,870 [Process: 0] Synchronize training processes
2024-08-18 15:11:07,871 [Process: 0] Evaluating...
2024-08-18 15:11:07,873 [Process: 0] EPOCH 26:
2024-08-18 15:11:07,874 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0707, 0.6464, 0.5246,  ..., 0.5567, 0.7375, 0.0748],
         [0.0731, 0.1087, 0.1362,  ..., 0.1276, 0.0875, 0.0537],
         [0.7856, 0.1087, 0.1362,  ..., 0.1276, 0.0875, 0.8177],
         [0.0707, 0.1361, 0.2029,  ..., 0.1880, 0.0875, 0.0537]],
        [[0.0919, 0.8122, 0.1787,  ..., 0.0138, 0.1585, 0.1080],
         [0.0919, 0.0626, 0.1073,  ..., 0.0138, 0.0885, 0.1151],
         [0.7244, 0.0626, 0.1073,  ..., 0.0138, 0.0885, 0.5883],
         [0.0919, 0.0626, 0.6066,  ..., 0.9587, 0.6644, 0.1885]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 25:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1198, 0.8037, 0.7845,  ..., 0.0539, 0.1429, 0.3669],
         [0.1198, 0.0654, 0.0718,  ..., 0.0539, 0.1429, 0.1253],
         [0.5264, 0.0654, 0.0718,  ..., 0.8383, 0.5043, 0.1253],
         [0.2339, 0.0654, 0.0718,  ..., 0.0539, 0.2099, 0.3826]],
        [[0.1375, 0.5678, 0.4075,  ..., 0.0448, 0.1086, 0.0214],
         [0.1375, 0.1094, 0.1405,  ..., 0.0448, 0.1086, 0.0214],
         [0.3326, 0.1026, 0.1405,  ..., 0.8655, 0.6392, 0.0214],
         [0.3924, 0.2202, 0.3115,  ..., 0.0448, 0.1437, 0.9359]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0984, 0.4559, 0.8521,  ..., 0.7782, 0.8290, 0.5415],
         [0.0984, 0.1288, 0.0530,  ..., 0.0736, 0.0570, 0.0878],
         [0.7048, 0.1288, 0.0474,  ..., 0.0736, 0.0570, 0.2829],
         [0.0984, 0.2865, 0.0474,  ..., 0.0745, 0.0570, 0.0878]],
        [[0.0560, 0.3062, 0.0417,  ..., 0.1393, 0.0361, 0.0869],
         [0.0560, 0.1053, 0.0417,  ..., 0.1393, 0.0361, 0.0869],
         [0.8321, 0.1053, 0.0417,  ..., 0.5112, 0.0361, 0.7392],
         [0.0560, 0.4832, 0.8748,  ..., 0.2103, 0.8917, 0.0869]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 26:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0841, 0.0470, 0.0721,  ..., 0.0645, 0.1110, 0.1143],
         [0.0759, 0.0470, 0.0721,  ..., 0.0645, 0.1110, 0.0599],
         [0.0759, 0.0470, 0.0721,  ..., 0.8066, 0.6670, 0.0599],
         [0.7641, 0.8590, 0.7836,  ..., 0.0645, 0.1110, 0.7660]],
        [[0.2022, 0.1451, 0.2106,  ..., 0.0662, 0.1068, 0.5813],
         [0.1792, 0.1451, 0.1132,  ..., 0.0662, 0.1068, 0.1227],
         [0.2980, 0.2771, 0.1131,  ..., 0.8015, 0.6795, 0.1227],
         [0.3207, 0.4326, 0.5631,  ..., 0.0662, 0.1068, 0.1733]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:08,939 [Process: 0] Synchronize training processes
2024-08-18 15:11:08,940 [Process: 0] Evaluating...
2024-08-18 15:11:08,942 [Process: 0] EPOCH 27:
2024-08-18 15:11:08,943 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:10,009 [Process: 0] Synchronize training processes
2024-08-18 15:11:10,009 [Process: 0] Evaluating...
2024-08-18 15:11:10,011 [Process: 0] EPOCH 28:
2024-08-18 15:11:10,013 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0482, 0.7532, 0.0715,  ..., 0.3038, 0.7792, 0.0884],
         [0.0482, 0.0869, 0.0715,  ..., 0.1471, 0.0772, 0.0884],
         [0.8553, 0.0639, 0.0715,  ..., 0.1471, 0.0718, 0.7348],
         [0.0482, 0.0959, 0.7854,  ..., 0.4019, 0.0718, 0.0884]],
        [[0.0637, 0.0575, 0.0935,  ..., 0.0921, 0.0494, 0.0774],
         [0.0637, 0.0575, 0.0935,  ..., 0.0921, 0.0494, 0.0774],
         [0.8089, 0.0575, 0.7196,  ..., 0.7236, 0.0494, 0.7678],
         [0.0637, 0.8275, 0.0935,  ..., 0.0921, 0.8518, 0.0774]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 27:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2412, 0.3434, 0.3615,  ..., 0.0855, 0.1586, 0.2529],
         [0.1152, 0.1463, 0.1200,  ..., 0.0855, 0.1586, 0.1170],
         [0.1098, 0.1463, 0.1200,  ..., 0.7434, 0.2835, 0.1162],
         [0.5338, 0.3639, 0.3985,  ..., 0.0855, 0.3993, 0.5140]],
        [[0.0805, 0.1679, 0.0931,  ..., 0.0683, 0.8148, 0.1301],
         [0.0805, 0.1217, 0.0931,  ..., 0.0683, 0.0519, 0.1301],
         [0.7586, 0.1217, 0.0931,  ..., 0.7951, 0.0519, 0.6096],
         [0.0805, 0.5887, 0.7206,  ..., 0.0683, 0.0814, 0.1301]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.8626, 0.3550, 0.6446,  ..., 0.3279, 0.5670, 0.6582],
         [0.0439, 0.1006, 0.0830,  ..., 0.1037, 0.1194, 0.0959],
         [0.0439, 0.0983, 0.0830,  ..., 0.0962, 0.1033, 0.0920],
         [0.0497, 0.4461, 0.1895,  ..., 0.4722, 0.2104, 0.1539]],
        [[0.0783, 0.0158, 0.0919,  ..., 0.0950, 0.0075, 0.0646],
         [0.0783, 0.0184, 0.0919,  ..., 0.0950, 0.0075, 0.0646],
         [0.7650, 0.0158, 0.7243,  ..., 0.7151, 0.0075, 0.8063],
         [0.0783, 0.9500, 0.0919,  ..., 0.0950, 0.9776, 0.0646]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 28:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0514, 0.0656, 0.0453,  ..., 0.0908, 0.1127, 0.0458],
         [0.0514, 0.0456, 0.0453,  ..., 0.0908, 0.1127, 0.0458],
         [0.0514, 0.0456, 0.0453,  ..., 0.7275, 0.6619, 0.0458],
         [0.8458, 0.8431, 0.8642,  ..., 0.0908, 0.1127, 0.8627]],
        [[0.0362, 0.2122, 0.2722,  ..., 0.9354, 0.1464, 0.0662],
         [0.0362, 0.1280, 0.1168,  ..., 0.0215, 0.1464, 0.0662],
         [0.8913, 0.1280, 0.1168,  ..., 0.0215, 0.5302, 0.8014],
         [0.0362, 0.5318, 0.4943,  ..., 0.0215, 0.1771, 0.0662]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:11,078 [Process: 0] Synchronize training processes
2024-08-18 15:11:11,079 [Process: 0] Evaluating...
2024-08-18 15:11:11,081 [Process: 0] EPOCH 29:
2024-08-18 15:11:11,083 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:12,149 [Process: 0] Synchronize training processes
2024-08-18 15:11:12,149 [Process: 0] Evaluating...
2024-08-18 15:11:12,151 [Process: 0] EPOCH 30:
2024-08-18 15:11:12,152 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0563, 0.5433, 0.7792,  ..., 0.7712, 0.6983, 0.8637],
         [0.0563, 0.0872, 0.0687,  ..., 0.0651, 0.0888, 0.0500],
         [0.8310, 0.0872, 0.0687,  ..., 0.0624, 0.0888, 0.0431],
         [0.0563, 0.2823, 0.0835,  ..., 0.1013, 0.1240, 0.0431]],
        [[0.0535, 0.9417, 0.1020,  ..., 0.0450, 0.0258, 0.0685],
         [0.0442, 0.0193, 0.1020,  ..., 0.0450, 0.0258, 0.0685],
         [0.0410, 0.0193, 0.6941,  ..., 0.0450, 0.0258, 0.7946],
         [0.8614, 0.0197, 0.1020,  ..., 0.8649, 0.9227, 0.0685]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 29:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2698, 0.1889, 0.0735,  ..., 0.0794, 0.1446, 0.2786],
         [0.1052, 0.1394, 0.0735,  ..., 0.0794, 0.1446, 0.1142],
         [0.1047, 0.1029, 0.0735,  ..., 0.7619, 0.1759, 0.0968],
         [0.5204, 0.5689, 0.7795,  ..., 0.0794, 0.5348, 0.5104]],
        [[0.0291, 0.1203, 0.7029,  ..., 0.8875, 0.5953, 0.0647],
         [0.0291, 0.1203, 0.0912,  ..., 0.0385, 0.1302, 0.0647],
         [0.9127, 0.6390, 0.0850,  ..., 0.0370, 0.1109, 0.8060],
         [0.0291, 0.1203, 0.1209,  ..., 0.0370, 0.1637, 0.0647]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0461, 0.7765, 0.8871,  ..., 0.7150, 0.8190, 0.5247],
         [0.0461, 0.0790, 0.0376,  ..., 0.1114, 0.0603, 0.1127],
         [0.2552, 0.0706, 0.0376,  ..., 0.0718, 0.0603, 0.1127],
         [0.6525, 0.0739, 0.0376,  ..., 0.1018, 0.0603, 0.2500]],
        [[0.0857, 0.1288, 0.1943,  ..., 0.3400, 0.0424, 0.0558],
         [0.0857, 0.0572, 0.0631,  ..., 0.0592, 0.0403, 0.0558],
         [0.7428, 0.0572, 0.0631,  ..., 0.0592, 0.0403, 0.8325],
         [0.0857, 0.7567, 0.6794,  ..., 0.5415, 0.8770, 0.0558]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 30:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:13,218 [Process: 0] Synchronize training processes
2024-08-18 15:11:13,219 [Process: 0] Evaluating...
2024-08-18 15:11:13,220 [Process: 0] EPOCH 31:
2024-08-18 15:11:13,222 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:14,289 [Process: 0] Synchronize training processes
2024-08-18 15:11:14,289 [Process: 0] Evaluating...
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2082, 0.0641, 0.0408,  ..., 0.0719, 0.1174, 0.0614],
         [0.0925, 0.0457, 0.0408,  ..., 0.0719, 0.1174, 0.0610],
         [0.0847, 0.0454, 0.0408,  ..., 0.7842, 0.6422, 0.0610],
         [0.6146, 0.8448, 0.8776,  ..., 0.0719, 0.1230, 0.8167]],
        [[0.0112, 0.1540, 0.9221,  ..., 0.8364, 0.5948, 0.0837],
         [0.0112, 0.1540, 0.0260,  ..., 0.0545, 0.1028, 0.0837],
         [0.9665, 0.4461, 0.0260,  ..., 0.0545, 0.1028, 0.7489],
         [0.0112, 0.2458, 0.0260,  ..., 0.0545, 0.1996, 0.0837]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0602, 0.7087, 0.7557,  ..., 0.8050, 0.8451, 0.6424],
         [0.0602, 0.0944, 0.0683,  ..., 0.0649, 0.0516, 0.0861],
         [0.7225, 0.0944, 0.0683,  ..., 0.0649, 0.0516, 0.0861],
         [0.1570, 0.1024, 0.1078,  ..., 0.0652, 0.0516, 0.1853]],
        [[0.0253, 0.1605, 0.2348,  ..., 0.1393, 0.0533, 0.0671],
         [0.0253, 0.0625, 0.0461,  ..., 0.0444, 0.0281, 0.0671],
         [0.9240, 0.0625, 0.0461,  ..., 0.0444, 0.0281, 0.7987],
         [0.0253, 0.7146, 0.6729,  ..., 0.7719, 0.8904, 0.0671]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 31:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2090, 0.1506, 0.1563,  ..., 0.0582, 0.0680, 0.2030],
         [0.0895, 0.0425, 0.0649,  ..., 0.0582, 0.0680, 0.0674],
         [0.0895, 0.0425, 0.0649,  ..., 0.8254, 0.7961, 0.0674],
         [0.6120, 0.7644, 0.7139,  ..., 0.0582, 0.0680, 0.6623]],
        [[0.0053, 0.3225, 0.6118,  ..., 0.6296, 0.1992, 0.0461],
         [0.0053, 0.1262, 0.1094,  ..., 0.1171, 0.1301, 0.0462],
         [0.9841, 0.1262, 0.1094,  ..., 0.1171, 0.1301, 0.8615],
         [0.0053, 0.4252, 0.1694,  ..., 0.1362, 0.5406, 0.0461]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0331, 0.4780, 0.2970,  ..., 0.4201, 0.5706, 0.2439],
         [0.0331, 0.1310, 0.1318,  ..., 0.1204, 0.1143, 0.1224],
         [0.1226, 0.1310, 0.1318,  ..., 0.1204, 0.1137, 0.1224],
         [0.8113, 0.2601, 0.4394,  ..., 0.3391, 0.2014, 0.5113]],
        [[0.0425, 0.8745, 0.8483,  ..., 0.1999, 0.4603, 0.0697],
         [0.0425, 0.0373, 0.0491,  ..., 0.0459, 0.0757, 0.0697],
         [0.0425, 0.0373, 0.0491,  ..., 0.0459, 0.0757, 0.7908],
         [0.8725, 0.0508, 0.0535,  ..., 0.7083, 0.3883, 0.0697]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 32:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:14,292 [Process: 0] EPOCH 32:
2024-08-18 15:11:14,294 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:15,359 [Process: 0] Synchronize training processes
2024-08-18 15:11:15,359 [Process: 0] Evaluating...
2024-08-18 15:11:15,361 [Process: 0] EPOCH 33:
2024-08-18 15:11:15,363 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1138, 0.1220, 0.1045,  ..., 0.0598, 0.0880, 0.0733],
         [0.0650, 0.0564, 0.0848,  ..., 0.0598, 0.0880, 0.0422],
         [0.0650, 0.0564, 0.0776,  ..., 0.8205, 0.7359, 0.0422],
         [0.7561, 0.7653, 0.7331,  ..., 0.0598, 0.0880, 0.8424]],
        [[0.0676, 0.6834, 0.8458,  ..., 0.6906, 0.4051, 0.0419],
         [0.0676, 0.0766, 0.0514,  ..., 0.0976, 0.1402, 0.0466],
         [0.7972, 0.0766, 0.0514,  ..., 0.0976, 0.1402, 0.8697],
         [0.0676, 0.1634, 0.0514,  ..., 0.1141, 0.3144, 0.0419]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0525, 0.7452, 0.6411,  ..., 0.8461, 0.7633, 0.7594],
         [0.0525, 0.0849, 0.1022,  ..., 0.0513, 0.0727, 0.0802],
         [0.8426, 0.0849, 0.1022,  ..., 0.0513, 0.0727, 0.0802],
         [0.0525, 0.0849, 0.1544,  ..., 0.0513, 0.0914, 0.0802]],
        [[0.1018, 0.1448, 0.2052,  ..., 0.1258, 0.0825, 0.0449],
         [0.1018, 0.0493, 0.0982,  ..., 0.0553, 0.0635, 0.0449],
         [0.6946, 0.0493, 0.0982,  ..., 0.0553, 0.0635, 0.8654],
         [0.1018, 0.7566, 0.5984,  ..., 0.7635, 0.7905, 0.0449]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 33:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2331, 0.1063, 0.0771,  ..., 0.0413, 0.1354, 0.1886],
         [0.0917, 0.0730, 0.0587,  ..., 0.0413, 0.1354, 0.0842],
         [0.0917, 0.0730, 0.0587,  ..., 0.8762, 0.3644, 0.0842],
         [0.5834, 0.7478, 0.8055,  ..., 0.0413, 0.3647, 0.6429]],
        [[0.0593, 0.6188, 0.4795,  ..., 0.8994, 0.0945, 0.0886],
         [0.0593, 0.0704, 0.1019,  ..., 0.0335, 0.0945, 0.0886],
         [0.8220, 0.0704, 0.1019,  ..., 0.0335, 0.7165, 0.7343],
         [0.0593, 0.2404, 0.3167,  ..., 0.0335, 0.0945, 0.0886]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0145, 0.8271, 0.8320,  ..., 0.8042, 0.9166, 0.7829],
         [0.0145, 0.0576, 0.0560,  ..., 0.0643, 0.0278, 0.0724],
         [0.9566, 0.0576, 0.0560,  ..., 0.0643, 0.0278, 0.0724],
         [0.0145, 0.0576, 0.0560,  ..., 0.0672, 0.0278, 0.0724]],
        [[0.1170, 0.0799, 0.1210,  ..., 0.0386, 0.0546, 0.0545],
         [0.1170, 0.0397, 0.0675,  ..., 0.0363, 0.0529, 0.0545],
         [0.2279, 0.0397, 0.0675,  ..., 0.0363, 0.0529, 0.8365],
         [0.5380, 0.8407, 0.7441,  ..., 0.8888, 0.8396, 0.0545]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 34:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:16,428 [Process: 0] Synchronize training processes
2024-08-18 15:11:16,428 [Process: 0] Evaluating...
2024-08-18 15:11:16,430 [Process: 0] EPOCH 34:
2024-08-18 15:11:16,432 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:17,498 [Process: 0] Synchronize training processes
2024-08-18 15:11:17,499 [Process: 0] Evaluating...
2024-08-18 15:11:17,500 [Process: 0] EPOCH 35:
2024-08-18 15:11:17,502 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1170, 0.1206, 0.0618,  ..., 0.0641, 0.0943, 0.0998],
         [0.0682, 0.0811, 0.0427,  ..., 0.0641, 0.0943, 0.0683],
         [0.0682, 0.0811, 0.0427,  ..., 0.8077, 0.1143, 0.0683],
         [0.7465, 0.7171, 0.8528,  ..., 0.0641, 0.6971, 0.7636]],
        [[0.0398, 0.8469, 0.8702,  ..., 0.8783, 0.2858, 0.0630],
         [0.0398, 0.0510, 0.0433,  ..., 0.0406, 0.1674, 0.0630],
         [0.8806, 0.0510, 0.0433,  ..., 0.0406, 0.3999, 0.8109],
         [0.0398, 0.0510, 0.0433,  ..., 0.0406, 0.1468, 0.0630]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0028, 0.6435, 0.6327,  ..., 0.7888, 0.8922, 0.7778],
         [0.0028, 0.1013, 0.1095,  ..., 0.0708, 0.0359, 0.0741],
         [0.9915, 0.1013, 0.1095,  ..., 0.0702, 0.0359, 0.0741],
         [0.0028, 0.1539, 0.1483,  ..., 0.0702, 0.0359, 0.0741]],
        [[0.0280, 0.3245, 0.1007,  ..., 0.0357, 0.0509, 0.0569],
         [0.0280, 0.1023, 0.0793,  ..., 0.0323, 0.0349, 0.0569],
         [0.9161, 0.1023, 0.0797,  ..., 0.0323, 0.0349, 0.8293],
         [0.0280, 0.4710, 0.7402,  ..., 0.8998, 0.8792, 0.0569]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 35:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1276, 0.1152, 0.0825,  ..., 0.0412, 0.1029, 0.0920],
         [0.0754, 0.0416, 0.0531,  ..., 0.0412, 0.0661, 0.0520],
         [0.0754, 0.0416, 0.0531,  ..., 0.8765, 0.0661, 0.0520],
         [0.7215, 0.8017, 0.8112,  ..., 0.0412, 0.7650, 0.8039]],
        [[0.0246, 0.8247, 0.8104,  ..., 0.8807, 0.1291, 0.0775],
         [0.0246, 0.0584, 0.0632,  ..., 0.0398, 0.1291, 0.0775],
         [0.9213, 0.0584, 0.0632,  ..., 0.0398, 0.6126, 0.7676],
         [0.0295, 0.0584, 0.0632,  ..., 0.0398, 0.1291, 0.0775]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0418, 0.6807, 0.8302,  ..., 0.8959, 0.6757, 0.7794],
         [0.0418, 0.1064, 0.0566,  ..., 0.0357, 0.0960, 0.0742],
         [0.8746, 0.1064, 0.0566,  ..., 0.0342, 0.0960, 0.0732],
         [0.0418, 0.1064, 0.0566,  ..., 0.0342, 0.1322, 0.0732]],
        [[0.1010, 0.2363, 0.1658,  ..., 0.0079, 0.3477, 0.0498],
         [0.1010, 0.0384, 0.0473,  ..., 0.0079, 0.0589, 0.0498],
         [0.6542, 0.0384, 0.0473,  ..., 0.0079, 0.0589, 0.8506],
         [0.1439, 0.6870, 0.7397,  ..., 0.9763, 0.5345, 0.0498]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:18,569 [Process: 0] Synchronize training processes
2024-08-18 15:11:18,570 [Process: 0] Evaluating...
2024-08-18 15:11:18,572 [Process: 0] EPOCH 36:
2024-08-18 15:11:18,573 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:19,645 [Process: 0] Synchronize training processes
2024-08-18 15:11:19,645 [Process: 0] Evaluating...
2024-08-18 15:11:19,647 [Process: 0] EPOCH 37:
2024-08-18 15:11:19,649 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 36:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0569, 0.1765, 0.0850,  ..., 0.0582, 0.0534, 0.0674],
         [0.0400, 0.0664, 0.0485,  ..., 0.0582, 0.0534, 0.0327],
         [0.0400, 0.0664, 0.0485,  ..., 0.8253, 0.8398, 0.0327],
         [0.8632, 0.6906, 0.8180,  ..., 0.0582, 0.0534, 0.8672]],
        [[0.0207, 0.5780, 0.8417,  ..., 0.9551, 0.1797, 0.0576],
         [0.0207, 0.1330, 0.0521,  ..., 0.0150, 0.1494, 0.0576],
         [0.9379, 0.1353, 0.0521,  ..., 0.0150, 0.5044, 0.8273],
         [0.0207, 0.1538, 0.0541,  ..., 0.0150, 0.1665, 0.0576]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0333, 0.6642, 0.8445,  ..., 0.7240, 0.8343, 0.5208],
         [0.0333, 0.0918, 0.0518,  ..., 0.0801, 0.0552, 0.1003],
         [0.9000, 0.0918, 0.0518,  ..., 0.0801, 0.0552, 0.1003],
         [0.0333, 0.1522, 0.0518,  ..., 0.1158, 0.0552, 0.2787]],
        [[0.0586, 0.2013, 0.1072,  ..., 0.1931, 0.0055, 0.0802],
         [0.0586, 0.0410, 0.0692,  ..., 0.0277, 0.0051, 0.0802],
         [0.8241, 0.0410, 0.0692,  ..., 0.0277, 0.0051, 0.7593],
         [0.0586, 0.7167, 0.7544,  ..., 0.7516, 0.9842, 0.0802]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 37:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.6702, 0.2089, 0.4690,  ..., 0.0532, 0.0488, 0.3634],
         [0.0992, 0.0386, 0.0578,  ..., 0.0532, 0.0488, 0.0745],
         [0.0992, 0.0386, 0.0578,  ..., 0.8404, 0.8536, 0.0674],
         [0.1314, 0.7139, 0.4154,  ..., 0.0532, 0.0488, 0.4947]],
        [[0.0215, 0.6034, 0.5602,  ..., 0.8901, 0.1109, 0.0706],
         [0.0215, 0.0840, 0.1006,  ..., 0.0366, 0.1109, 0.0706],
         [0.9356, 0.0840, 0.0977,  ..., 0.0366, 0.5573, 0.7882],
         [0.0215, 0.2286, 0.2415,  ..., 0.0366, 0.2209, 0.0706]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:20,714 [Process: 0] Synchronize training processes
2024-08-18 15:11:20,715 [Process: 0] Evaluating...
2024-08-18 15:11:20,716 [Process: 0] EPOCH 38:
2024-08-18 15:11:20,718 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:21,785 [Process: 0] Synchronize training processes
2024-08-18 15:11:21,785 [Process: 0] Evaluating...
2024-08-18 15:11:21,787 [Process: 0] EPOCH 39:
2024-08-18 15:11:21,789 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[2.5898e-02, 6.2708e-01, 4.2254e-01,  ..., 3.0279e-01,
          6.0704e-01, 4.0064e-01],
         [2.5898e-02, 8.0090e-02, 6.6339e-02,  ..., 7.5020e-02,
          8.8482e-02, 1.2118e-01],
         [9.2231e-01, 8.0090e-02, 6.6339e-02,  ..., 7.5020e-02,
          8.8482e-02, 1.2118e-01],
         [2.5898e-02, 2.1274e-01, 4.4478e-01,  ..., 5.4717e-01,
          2.1600e-01, 3.5701e-01]],
        [[4.9823e-02, 5.8981e-01, 3.1214e-01,  ..., 1.1455e-03,
          6.6947e-01, 6.6564e-02],
         [5.0161e-02, 7.8471e-02, 8.8008e-02,  ..., 6.3031e-04,
          5.7686e-02, 6.6564e-02],
         [8.5019e-01, 7.8471e-02, 8.8008e-02,  ..., 6.3031e-04,
          5.7521e-02, 8.0031e-01],
         [4.9823e-02, 2.5324e-01, 5.1185e-01,  ..., 9.9759e-01,
          2.1532e-01, 6.6564e-02]]], device='cuda:0',
       grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 38:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0735, 0.0504, 0.0797,  ..., 0.0378, 0.0371, 0.0238],
         [0.0600, 0.0344, 0.0746,  ..., 0.0378, 0.0371, 0.0238],
         [0.0600, 0.0344, 0.0986,  ..., 0.8866, 0.8887, 0.0238],
         [0.8064, 0.8809, 0.7472,  ..., 0.0378, 0.0371, 0.9286]],
        [[0.0260, 0.6300, 0.6712,  ..., 0.9084, 0.1032, 0.0657],
         [0.0260, 0.1258, 0.0874,  ..., 0.0305, 0.1032, 0.0657],
         [0.9219, 0.1187, 0.0874,  ..., 0.0305, 0.5677, 0.8030],
         [0.0260, 0.1255, 0.1539,  ..., 0.0305, 0.2259, 0.0657]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0221, 0.8138, 0.8829,  ..., 0.8303, 0.8124, 0.8608],
         [0.0221, 0.0621, 0.0390,  ..., 0.0566, 0.0531, 0.0464],
         [0.9338, 0.0621, 0.0390,  ..., 0.0566, 0.0531, 0.0464],
         [0.0221, 0.0621, 0.0390,  ..., 0.0566, 0.0815, 0.0464]],
        [[0.0582, 0.1109, 0.2493,  ..., 0.0190, 0.1333, 0.0730],
         [0.0582, 0.0439, 0.1598,  ..., 0.0190, 0.0563, 0.0732],
         [0.8255, 0.0439, 0.3832,  ..., 0.0190, 0.0563, 0.7808],
         [0.0582, 0.8013, 0.2076,  ..., 0.9430, 0.7540, 0.0730]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 39:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0378, 0.0458, 0.0936,  ..., 0.0942, 0.0406, 0.1098],
         [0.0331, 0.0322, 0.0430,  ..., 0.0942, 0.0406, 0.0577],
         [0.0331, 0.0322, 0.0430,  ..., 0.7173, 0.8782, 0.0577],
         [0.8961, 0.8898, 0.8204,  ..., 0.0942, 0.0406, 0.7748]],
        [[0.0194, 0.7999, 0.8539,  ..., 0.9506, 0.1213, 0.0656],
         [0.0194, 0.0667, 0.0487,  ..., 0.0165, 0.1213, 0.0656],
         [0.9419, 0.0667, 0.0487,  ..., 0.0165, 0.3839, 0.8031],
         [0.0194, 0.0667, 0.0487,  ..., 0.0165, 0.3735, 0.0656]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:22,854 [Process: 0] Synchronize training processes
2024-08-18 15:11:22,855 [Process: 0] Evaluating...
2024-08-18 15:11:22,856 [Process: 0] EPOCH 40:
2024-08-18 15:11:22,858 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:23,923 [Process: 0] Synchronize training processes
2024-08-18 15:11:23,924 [Process: 0] Evaluating...
2024-08-18 15:11:23,925 [Process: 0] EPOCH 41:
2024-08-18 15:11:23,927 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0413, 0.5671, 0.8688,  ..., 0.7694, 0.6949, 0.3387],
         [0.0282, 0.1238, 0.0437,  ..., 0.0769, 0.0830, 0.1521],
         [0.9024, 0.1238, 0.0437,  ..., 0.0769, 0.0830, 0.2415],
         [0.0282, 0.1854, 0.0437,  ..., 0.0769, 0.1391, 0.2677]],
        [[0.0718, 0.0938, 0.0749,  ..., 0.0277, 0.3360, 0.0714],
         [0.0718, 0.0146, 0.0749,  ..., 0.0277, 0.0351, 0.0714],
         [0.7847, 0.0146, 0.7605,  ..., 0.0429, 0.0351, 0.7858],
         [0.0718, 0.8769, 0.0896,  ..., 0.9017, 0.5937, 0.0714]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 40:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0412, 0.1171, 0.1649,  ..., 0.0562, 0.0547, 0.0860],
         [0.0284, 0.0444, 0.0584,  ..., 0.0562, 0.0547, 0.0526],
         [0.0284, 0.0444, 0.0584,  ..., 0.8313, 0.8359, 0.0526],
         [0.9019, 0.7940, 0.7183,  ..., 0.0562, 0.0547, 0.8087]],
        [[0.0125, 0.4442, 0.7886,  ..., 0.9646, 0.1205, 0.0764],
         [0.0125, 0.1353, 0.0750,  ..., 0.0118, 0.1205, 0.0764],
         [0.9626, 0.1353, 0.0682,  ..., 0.0118, 0.4275, 0.7645],
         [0.0125, 0.2852, 0.0682,  ..., 0.0118, 0.3315, 0.0826]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0228, 0.4168, 0.6108,  ..., 0.9409, 0.8415, 0.0824],
         [0.0228, 0.1309, 0.1002,  ..., 0.0197, 0.0528, 0.0849],
         [0.9316, 0.1309, 0.1002,  ..., 0.0197, 0.0528, 0.7503],
         [0.0228, 0.3213, 0.1888,  ..., 0.0197, 0.0528, 0.0824]],
        [[0.0778, 0.8077, 0.0837,  ..., 0.0098, 0.1345, 0.0608],
         [0.0778, 0.0316, 0.0910,  ..., 0.0098, 0.0280, 0.0608],
         [0.7667, 0.0316, 0.2147,  ..., 0.0098, 0.0280, 0.8175],
         [0.0778, 0.1291, 0.6107,  ..., 0.9705, 0.8094, 0.0608]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 41:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0853, 0.3138, 0.1274,  ..., 0.0448, 0.0554, 0.0810],
         [0.0494, 0.0907, 0.0450,  ..., 0.0448, 0.0554, 0.0552],
         [0.0489, 0.0907, 0.0450,  ..., 0.8655, 0.8338, 0.0552],
         [0.8164, 0.5048, 0.7825,  ..., 0.0448, 0.0554, 0.8087]],
        [[0.0138, 0.4956, 0.4154,  ..., 0.9336, 0.0964, 0.0841],
         [0.0138, 0.1535, 0.1430,  ..., 0.0221, 0.0964, 0.0841],
         [0.9586, 0.1670, 0.1600,  ..., 0.0221, 0.6382, 0.7476],
         [0.0138, 0.1840, 0.2816,  ..., 0.0221, 0.1691, 0.0841]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:24,996 [Process: 0] Synchronize training processes
2024-08-18 15:11:24,997 [Process: 0] Evaluating...
2024-08-18 15:11:25,000 [Process: 0] EPOCH 42:
2024-08-18 15:11:25,003 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:26,093 [Process: 0] Synchronize training processes
2024-08-18 15:11:26,093 [Process: 0] Evaluating...
2024-08-18 15:11:26,095 [Process: 0] EPOCH 43:
2024-08-18 15:11:26,097 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0343, 0.1038, 0.4607,  ..., 0.0861, 0.0970, 0.1021],
         [0.0343, 0.1038, 0.1414,  ..., 0.0861, 0.0970, 0.1021],
         [0.8972, 0.5735, 0.1433,  ..., 0.6453, 0.6570, 0.5725],
         [0.0343, 0.2190, 0.2546,  ..., 0.1824, 0.1490, 0.2232]],
        [[0.0755, 0.9738, 0.0081,  ..., 0.0071, 0.9350, 0.0555],
         [0.0755, 0.0087, 0.0081,  ..., 0.0067, 0.0218, 0.0555],
         [0.7630, 0.0087, 0.0081,  ..., 0.0062, 0.0216, 0.8336],
         [0.0860, 0.0087, 0.9756,  ..., 0.9799, 0.0216, 0.0555]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 42:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2243, 0.1919, 0.2127,  ..., 0.0294, 0.0394, 0.0688],
         [0.0783, 0.0619, 0.0640,  ..., 0.0294, 0.0394, 0.0543],
         [0.0783, 0.0619, 0.0640,  ..., 0.9118, 0.8818, 0.0518],
         [0.6192, 0.6842, 0.6592,  ..., 0.0294, 0.0394, 0.8251]],
        [[0.0134, 0.4098, 0.5635,  ..., 0.9344, 0.0969, 0.0838],
         [0.0134, 0.1436, 0.1298,  ..., 0.0219, 0.0969, 0.0838],
         [0.9597, 0.1585, 0.1298,  ..., 0.0219, 0.6411, 0.7481],
         [0.0134, 0.2881, 0.1768,  ..., 0.0219, 0.1651, 0.0843]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0206, 0.5834, 0.8757,  ..., 0.1740, 0.2741, 0.1797],
         [0.0206, 0.1104, 0.0414,  ..., 0.1481, 0.1474, 0.1473],
         [0.9382, 0.1104, 0.0414,  ..., 0.3939, 0.4065, 0.5028],
         [0.0206, 0.1958, 0.0414,  ..., 0.2840, 0.1719, 0.1702]],
        [[0.0678, 0.5981, 0.0054,  ..., 0.0051, 0.1490, 0.0398],
         [0.0678, 0.0291, 0.0054,  ..., 0.0051, 0.0316, 0.0398],
         [0.7967, 0.0291, 0.0054,  ..., 0.0051, 0.0316, 0.8805],
         [0.0678, 0.3437, 0.9839,  ..., 0.9846, 0.7878, 0.0398]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 43:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3445, 0.1642, 0.0319,  ..., 0.0289, 0.0378, 0.3742],
         [0.0868, 0.0620, 0.0327,  ..., 0.0289, 0.0378, 0.1102],
         [0.0868, 0.0620, 0.0319,  ..., 0.9132, 0.8865, 0.1120],
         [0.4818, 0.7118, 0.9035,  ..., 0.0289, 0.0378, 0.4036]],
        [[0.0295, 0.5121, 0.7489,  ..., 0.9419, 0.1132, 0.0587],
         [0.0295, 0.1080, 0.0776,  ..., 0.0194, 0.1132, 0.0587],
         [0.9116, 0.1080, 0.0776,  ..., 0.0194, 0.4643, 0.8238],
         [0.0295, 0.2720, 0.0960,  ..., 0.0194, 0.3093, 0.0587]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:27,162 [Process: 0] Synchronize training processes
2024-08-18 15:11:27,163 [Process: 0] Evaluating...
2024-08-18 15:11:27,164 [Process: 0] EPOCH 44:
2024-08-18 15:11:27,166 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:28,232 [Process: 0] Synchronize training processes
2024-08-18 15:11:28,233 [Process: 0] Evaluating...
2024-08-18 15:11:28,234 [Process: 0] EPOCH 45:
2024-08-18 15:11:28,236 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0815, 0.9444, 0.8668,  ..., 0.1158, 0.1419, 0.0899],
         [0.0815, 0.0186, 0.0430,  ..., 0.1158, 0.1469, 0.0899],
         [0.7195, 0.0185, 0.0430,  ..., 0.5876, 0.4266, 0.7303],
         [0.1175, 0.0185, 0.0472,  ..., 0.1808, 0.2846, 0.0899]],
        [[0.0572, 0.6114, 0.0425,  ..., 0.0155, 0.0529, 0.0509],
         [0.0572, 0.0477, 0.0425,  ..., 0.0155, 0.0316, 0.0509],
         [0.8283, 0.0477, 0.0495,  ..., 0.0180, 0.0316, 0.8473],
         [0.0572, 0.2932, 0.8655,  ..., 0.9510, 0.8839, 0.0509]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 44:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.2249, 0.0169, 0.2327,  ..., 0.0533, 0.0667, 0.6065],
         [0.0702, 0.0169, 0.0507,  ..., 0.0533, 0.0667, 0.0630],
         [0.0702, 0.0169, 0.0507,  ..., 0.8402, 0.7998, 0.0630],
         [0.6347, 0.9494, 0.6659,  ..., 0.0533, 0.0667, 0.2675]],
        [[0.0703, 0.2848, 0.8998,  ..., 0.9056, 0.1142, 0.0646],
         [0.0703, 0.1099, 0.0334,  ..., 0.0315, 0.1142, 0.0646],
         [0.7615, 0.1099, 0.0334,  ..., 0.0315, 0.5392, 0.8063],
         [0.0979, 0.4955, 0.0334,  ..., 0.0315, 0.2324, 0.0646]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0333, 0.7918, 0.9282,  ..., 0.0772, 0.0894, 0.0757],
         [0.0333, 0.0694, 0.0239,  ..., 0.0772, 0.0894, 0.0757],
         [0.9000, 0.0694, 0.0239,  ..., 0.7684, 0.7077, 0.7728],
         [0.0333, 0.0694, 0.0239,  ..., 0.0772, 0.1134, 0.0757]],
        [[0.0626, 0.6511, 0.0113,  ..., 0.0024, 0.0270, 0.0469],
         [0.0626, 0.0506, 0.0135,  ..., 0.0024, 0.0154, 0.0469],
         [0.8121, 0.0506, 0.0113,  ..., 0.0024, 0.0154, 0.8593],
         [0.0626, 0.2478, 0.9639,  ..., 0.9929, 0.9422, 0.0469]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 45:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:29,303 [Process: 0] Synchronize training processes
2024-08-18 15:11:29,303 [Process: 0] Evaluating...
2024-08-18 15:11:29,305 [Process: 0] EPOCH 46:
2024-08-18 15:11:29,307 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.3480, 0.0811, 0.1196,  ..., 0.0371, 0.0558, 0.1907],
         [0.1082, 0.0449, 0.0677,  ..., 0.0371, 0.0558, 0.0598],
         [0.1082, 0.0449, 0.0677,  ..., 0.8888, 0.8325, 0.0598],
         [0.4356, 0.8291, 0.7451,  ..., 0.0371, 0.0558, 0.6898]],
        [[0.0216, 0.1343, 0.6303,  ..., 0.7949, 0.1090, 0.0495],
         [0.0216, 0.1022, 0.1035,  ..., 0.0653, 0.1090, 0.0495],
         [0.9351, 0.1022, 0.1239,  ..., 0.0653, 0.1887, 0.8514],
         [0.0216, 0.6614, 0.1423,  ..., 0.0746, 0.5934, 0.0495]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0279, 0.7935, 0.8123,  ..., 0.0653, 0.1399, 0.0726],
         [0.0279, 0.0587, 0.0523,  ..., 0.0653, 0.1399, 0.0726],
         [0.9163, 0.0587, 0.0523,  ..., 0.8042, 0.4432, 0.7821],
         [0.0279, 0.0892, 0.0832,  ..., 0.0653, 0.2771, 0.0726]],
        [[0.0733, 0.8232, 0.0178,  ..., 0.0059, 0.1678, 0.0537],
         [0.0733, 0.0350, 0.0184,  ..., 0.0063, 0.0346, 0.0537],
         [0.7802, 0.0350, 0.0178,  ..., 0.0059, 0.0346, 0.8388],
         [0.0733, 0.1069, 0.9460,  ..., 0.9820, 0.7630, 0.0537]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 46:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1081, 0.0981, 0.1366,  ..., 0.0501, 0.0412, 0.1609],
         [0.0444, 0.0664, 0.0740,  ..., 0.0501, 0.0412, 0.0706],
         [0.0444, 0.0664, 0.0740,  ..., 0.8498, 0.8765, 0.0706],
         [0.8031, 0.7691, 0.7154,  ..., 0.0501, 0.0412, 0.6979]],
        [[0.0582, 0.1154, 0.6490,  ..., 0.8818, 0.0759, 0.0636],
         [0.0582, 0.1154, 0.0838,  ..., 0.0394, 0.0759, 0.0636],
         [0.8253, 0.1901, 0.0838,  ..., 0.0394, 0.0800, 0.8092],
         [0.0582, 0.5791, 0.1834,  ..., 0.0394, 0.7683, 0.0636]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0286, 0.7082, 0.5347,  ..., 0.1052, 0.8038, 0.0845],
         [0.0286, 0.0713, 0.0977,  ..., 0.1052, 0.0628, 0.0845],
         [0.9141, 0.0713, 0.0977,  ..., 0.4157, 0.0628, 0.7393],
         [0.0286, 0.1491, 0.2699,  ..., 0.3739, 0.0707, 0.0917]],
        [[0.0577, 0.8451, 0.0018,  ..., 0.0018, 0.2940, 0.0404],
         [0.0577, 0.0452, 0.0018,  ..., 0.0018, 0.0627, 0.0404],
         [0.8268, 0.0452, 0.0018,  ..., 0.0018, 0.0627, 0.8787],
         [0.0577, 0.0644, 0.9946,  ..., 0.9945, 0.5806, 0.0404]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 47:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:30,374 [Process: 0] Synchronize training processes
2024-08-18 15:11:30,374 [Process: 0] Evaluating...
2024-08-18 15:11:30,376 [Process: 0] EPOCH 47:
2024-08-18 15:11:30,378 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:31,446 [Process: 0] Synchronize training processes
2024-08-18 15:11:31,447 [Process: 0] Evaluating...
2024-08-18 15:11:31,448 [Process: 0] EPOCH 48:
2024-08-18 15:11:31,450 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0966, 0.0382, 0.0190,  ..., 0.0189, 0.0601, 0.0803],
         [0.0572, 0.0298, 0.0190,  ..., 0.0189, 0.0601, 0.0520],
         [0.0572, 0.0298, 0.0190,  ..., 0.9432, 0.8197, 0.0520],
         [0.7889, 0.9023, 0.9429,  ..., 0.0189, 0.0601, 0.8157]],
        [[0.0206, 0.0986, 0.4149,  ..., 0.9589, 0.4060, 0.0455],
         [0.0206, 0.0986, 0.1013,  ..., 0.0137, 0.0908, 0.0455],
         [0.9382, 0.1505, 0.1013,  ..., 0.0137, 0.0908, 0.8635],
         [0.0206, 0.6523, 0.3825,  ..., 0.0137, 0.4123, 0.0455]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0243, 0.6801, 0.7820,  ..., 0.0363, 0.8688, 0.1010],
         [0.0243, 0.0770, 0.0629,  ..., 0.0363, 0.0315, 0.1010],
         [0.9270, 0.0770, 0.0629,  ..., 0.0363, 0.0315, 0.6430],
         [0.0243, 0.1658, 0.0921,  ..., 0.8910, 0.0682, 0.1551]],
        [[0.0671, 0.8084, 0.0040,  ..., 0.0069, 0.1467, 0.0443],
         [0.0671, 0.0403, 0.0040,  ..., 0.0069, 0.0438, 0.0443],
         [0.7988, 0.0403, 0.0040,  ..., 0.0069, 0.0438, 0.8672],
         [0.0671, 0.1110, 0.9881,  ..., 0.9794, 0.7657, 0.0443]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 48:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0499, 0.0750, 0.1001,  ..., 0.0359, 0.0409, 0.0763],
         [0.0499, 0.0750, 0.1001,  ..., 0.0359, 0.0409, 0.0763],
         [0.0499, 0.0750, 0.1400,  ..., 0.8922, 0.8773, 0.0763],
         [0.8503, 0.7749, 0.6598,  ..., 0.0359, 0.0409, 0.7710]],
        [[0.1524, 0.1193, 0.1109,  ..., 0.9661, 0.0925, 0.0729],
         [0.0723, 0.1193, 0.1109,  ..., 0.0113, 0.0925, 0.0696],
         [0.7031, 0.3950, 0.1629,  ..., 0.0113, 0.6829, 0.7880],
         [0.0723, 0.3664, 0.6153,  ..., 0.0113, 0.1320, 0.0696]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0339, 0.2731, 0.8870,  ..., 0.1022, 0.7260, 0.0670],
         [0.0339, 0.0727, 0.0363,  ..., 0.1022, 0.0661, 0.0670],
         [0.8983, 0.0727, 0.0363,  ..., 0.3032, 0.0661, 0.7989],
         [0.0339, 0.5815, 0.0404,  ..., 0.4925, 0.1419, 0.0670]],
        [[0.0685, 0.9209, 0.0038,  ..., 0.0169, 0.0793, 0.0441],
         [0.0685, 0.0264, 0.0038,  ..., 0.0169, 0.0308, 0.0441],
         [0.7944, 0.0264, 0.0038,  ..., 0.0169, 0.0308, 0.8676],
         [0.0685, 0.0264, 0.9887,  ..., 0.9492, 0.8591, 0.0441]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 49:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:32,515 [Process: 0] Synchronize training processes
2024-08-18 15:11:32,516 [Process: 0] Evaluating...
2024-08-18 15:11:32,517 [Process: 0] EPOCH 49:
2024-08-18 15:11:32,519 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:33,589 [Process: 0] Synchronize training processes
2024-08-18 15:11:33,589 [Process: 0] Evaluating...
2024-08-18 15:11:33,591 [Process: 0] EPOCH 50:
2024-08-18 15:11:33,593 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.5452, 0.4012, 0.0993,  ..., 0.0325, 0.0593, 0.5344],
         [0.0888, 0.0842, 0.0632,  ..., 0.0325, 0.0593, 0.0840],
         [0.0888, 0.0842, 0.0599,  ..., 0.9024, 0.8220, 0.0840],
         [0.2771, 0.4305, 0.7776,  ..., 0.0325, 0.0593, 0.2977]],
        [[0.0349, 0.0546, 0.0814,  ..., 0.2769, 0.0696, 0.0877],
         [0.0349, 0.0546, 0.0858,  ..., 0.0833, 0.0696, 0.0877],
         [0.8953, 0.0637, 0.0838,  ..., 0.0833, 0.0988, 0.7092],
         [0.0349, 0.8270, 0.7490,  ..., 0.5564, 0.7620, 0.1153]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0212, 0.0881, 0.6408,  ..., 0.1016, 0.0783, 0.0652],
         [0.0212, 0.0881, 0.1012,  ..., 0.1016, 0.0631, 0.0652],
         [0.9365, 0.0881, 0.0906,  ..., 0.5809, 0.0631, 0.8043],
         [0.0212, 0.7357, 0.1674,  ..., 0.2159, 0.7954, 0.0652]],
        [[0.0464, 0.9896, 0.0209,  ..., 0.0127, 0.6582, 0.0653],
         [0.0464, 0.0035, 0.0209,  ..., 0.0127, 0.0688, 0.0623],
         [0.8607, 0.0035, 0.0209,  ..., 0.0127, 0.0688, 0.8101],
         [0.0464, 0.0035, 0.9372,  ..., 0.9618, 0.2043, 0.0623]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 50:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0270, 0.0695, 0.0259,  ..., 0.0270, 0.0357, 0.7428],
         [0.0270, 0.0695, 0.0259,  ..., 0.0270, 0.0357, 0.0785],
         [0.0270, 0.0695, 0.0259,  ..., 0.9189, 0.8929, 0.0854],
         [0.9191, 0.7916, 0.9223,  ..., 0.0270, 0.0357, 0.0933]],
        [[0.0348, 0.1009, 0.0994,  ..., 0.7836, 0.5305, 0.1026],
         [0.0348, 0.1009, 0.0796,  ..., 0.0665, 0.1025, 0.1026],
         [0.8957, 0.2628, 0.0796,  ..., 0.0665, 0.1025, 0.3167],
         [0.0348, 0.5353, 0.7414,  ..., 0.0834, 0.2646, 0.4781]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0530, 0.0526, 0.9508,  ..., 0.0951, 0.1587, 0.1113],
         [0.0530, 0.0526, 0.0164,  ..., 0.0951, 0.1005, 0.1113],
         [0.8109, 0.0526, 0.0164,  ..., 0.6578, 0.1005, 0.4920],
         [0.0832, 0.8421, 0.0164,  ..., 0.1520, 0.6403, 0.2854]],
        [[0.0500, 0.9690, 0.0162,  ..., 0.0140, 0.0229, 0.0418],
         [0.0500, 0.0103, 0.0162,  ..., 0.0140, 0.0229, 0.0418],
         [0.8499, 0.0103, 0.0162,  ..., 0.0140, 0.0229, 0.8747],
         [0.0500, 0.0103, 0.9513,  ..., 0.9581, 0.9312, 0.0418]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:34,660 [Process: 0] Synchronize training processes
2024-08-18 15:11:34,661 [Process: 0] Evaluating...
2024-08-18 15:11:34,662 [Process: 0] EPOCH 51:
2024-08-18 15:11:34,664 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:35,730 [Process: 0] Synchronize training processes
2024-08-18 15:11:35,731 [Process: 0] Evaluating...
2024-08-18 15:11:35,735 [Process: 0] EPOCH 52:
2024-08-18 15:11:35,737 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 51:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0997, 0.0629, 0.0384,  ..., 0.0213, 0.0435, 0.0162],
         [0.0662, 0.0605, 0.0371,  ..., 0.0213, 0.0402, 0.0162],
         [0.0662, 0.0605, 0.0371,  ..., 0.9361, 0.8761, 0.0162],
         [0.7679, 0.8161, 0.8873,  ..., 0.0213, 0.0402, 0.9514]],
        [[0.0621, 0.3724, 0.0850,  ..., 0.1193, 0.1048, 0.1241],
         [0.0621, 0.0866, 0.0842,  ..., 0.1193, 0.1048, 0.1241],
         [0.8138, 0.0866, 0.0842,  ..., 0.2815, 0.1845, 0.4562],
         [0.0621, 0.4543, 0.7466,  ..., 0.4800, 0.6059, 0.2956]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0509, 0.1113, 0.9732,  ..., 0.0596, 0.0729, 0.0739],
         [0.0509, 0.1113, 0.0089,  ..., 0.0596, 0.0729, 0.0739],
         [0.8310, 0.4844, 0.0089,  ..., 0.8211, 0.0911, 0.7727],
         [0.0672, 0.2930, 0.0089,  ..., 0.0596, 0.7631, 0.0794]],
        [[0.0776, 0.9231, 0.0096,  ..., 0.0285, 0.2306, 0.0471],
         [0.0776, 0.0252, 0.0096,  ..., 0.0285, 0.0592, 0.0471],
         [0.7672, 0.0252, 0.0096,  ..., 0.0285, 0.0592, 0.8588],
         [0.0776, 0.0264, 0.9711,  ..., 0.9145, 0.6510, 0.0471]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 52:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0919, 0.0857, 0.0294,  ..., 0.0450, 0.0593, 0.0269],
         [0.0608, 0.0554, 0.0294,  ..., 0.0450, 0.0572, 0.0269],
         [0.0608, 0.0554, 0.0294,  ..., 0.8651, 0.8264, 0.0269],
         [0.7865, 0.8035, 0.9117,  ..., 0.0450, 0.0572, 0.9192]],
        [[0.0606, 0.5557, 0.9531,  ..., 0.0348, 0.2829, 0.0414],
         [0.0546, 0.0871, 0.0156,  ..., 0.0348, 0.1194, 0.0414],
         [0.8301, 0.0871, 0.0156,  ..., 0.8956, 0.1194, 0.8757],
         [0.0546, 0.2701, 0.0156,  ..., 0.0348, 0.4783, 0.0414]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
2024-08-18 15:11:36,803 [Process: 0] Synchronize training processes
2024-08-18 15:11:36,803 [Process: 0] Evaluating...
2024-08-18 15:11:36,805 [Process: 0] EPOCH 53:
2024-08-18 15:11:36,807 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:37,924 [Process: 0] Synchronize training processes
2024-08-18 15:11:37,925 [Process: 0] Evaluating...
2024-08-18 15:11:37,926 [Process: 0] EPOCH 54:
2024-08-18 15:11:37,928 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0459, 0.0570, 0.8962,  ..., 0.0443, 0.9541, 0.0556],
         [0.0459, 0.0570, 0.0346,  ..., 0.0443, 0.0153, 0.0556],
         [0.8623, 0.8289, 0.0346,  ..., 0.8671, 0.0153, 0.8331],
         [0.0459, 0.0570, 0.0346,  ..., 0.0443, 0.0153, 0.0556]],
        [[0.0693, 0.8213, 0.0024,  ..., 0.0038, 0.5761, 0.0498],
         [0.0702, 0.0507, 0.0024,  ..., 0.0038, 0.0552, 0.0498],
         [0.7913, 0.0492, 0.0024,  ..., 0.0038, 0.0552, 0.8507],
         [0.0693, 0.0789, 0.9927,  ..., 0.9885, 0.3135, 0.0498]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 53:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.4526, 0.6551, 0.0982,  ..., 0.0310, 0.0498, 0.0024],
         [0.0699, 0.0593, 0.0444,  ..., 0.0310, 0.0498, 0.0024],
         [0.0699, 0.0593, 0.0444,  ..., 0.9071, 0.8506, 0.0024],
         [0.4075, 0.2264, 0.8130,  ..., 0.0310, 0.0498, 0.9929]],
        [[0.0389, 0.0589, 0.9751,  ..., 0.0494, 0.3861, 0.0564],
         [0.0299, 0.0589, 0.0083,  ..., 0.0494, 0.0612, 0.0564],
         [0.9014, 0.8233, 0.0083,  ..., 0.8517, 0.0612, 0.8307],
         [0.0299, 0.0589, 0.0083,  ..., 0.0494, 0.4916, 0.0564]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0761, 0.0686, 0.9809,  ..., 0.0610, 0.9207, 0.0497],
         [0.0761, 0.0686, 0.0064,  ..., 0.0610, 0.0264, 0.0497],
         [0.7663, 0.7923, 0.0064,  ..., 0.8169, 0.0264, 0.0497],
         [0.0814, 0.0705, 0.0064,  ..., 0.0610, 0.0264, 0.8508]],
        [[0.0678, 0.8637, 0.0067,  ..., 0.0067, 0.9605, 0.0460],
         [0.0678, 0.0446, 0.0067,  ..., 0.0067, 0.0132, 0.0460],
         [0.7965, 0.0446, 0.0067,  ..., 0.0067, 0.0132, 0.8619],
         [0.0678, 0.0471, 0.9800,  ..., 0.9799, 0.0132, 0.0460]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 54:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0725, 0.1954, 0.0293,  ..., 0.0154, 0.0533, 0.0380],
         [0.0394, 0.0975, 0.0293,  ..., 0.0154, 0.0533, 0.0380],
         [0.0394, 0.1073, 0.0293,  ..., 0.9539, 0.8400, 0.0380],
         [0.8487, 0.5998, 0.9121,  ..., 0.0154, 0.0533, 0.8861]],
        [[0.0689, 0.1065, 0.9722,  ..., 0.0611, 0.4063, 0.0487],
         [0.0359, 0.0494, 0.0093,  ..., 0.0611, 0.0740, 0.0487],
         [0.8593, 0.0494, 0.0093,  ..., 0.8167, 0.0740, 0.8538],
         [0.0359, 0.7947, 0.0093,  ..., 0.0611, 0.4457, 0.0487]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:39,064 [Process: 0] Synchronize training processes
2024-08-18 15:11:39,064 [Process: 0] Evaluating...
2024-08-18 15:11:39,067 [Process: 0] EPOCH 55:
2024-08-18 15:11:39,069 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:40,203 [Process: 0] Synchronize training processes
2024-08-18 15:11:40,203 [Process: 0] Evaluating...
2024-08-18 15:11:40,205 [Process: 0] EPOCH 56:
2024-08-18 15:11:40,207 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0661, 0.0868, 0.9543,  ..., 0.0738, 0.9791, 0.0782],
         [0.0661, 0.0868, 0.0152,  ..., 0.0738, 0.0070, 0.0782],
         [0.8017, 0.2492, 0.0152,  ..., 0.7502, 0.0070, 0.7571],
         [0.0661, 0.5773, 0.0152,  ..., 0.1022, 0.0070, 0.0865]],
        [[0.0740, 0.9258, 0.0164,  ..., 0.0025, 0.3716, 0.0408],
         [0.0740, 0.0227, 0.0164,  ..., 0.0025, 0.0650, 0.0408],
         [0.7779, 0.0227, 0.0164,  ..., 0.0025, 0.0650, 0.8775],
         [0.0740, 0.0289, 0.9507,  ..., 0.9926, 0.4984, 0.0408]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 55:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.1231, 0.0422, 0.0560,  ..., 0.0083, 0.0596, 0.0341],
         [0.0432, 0.0245, 0.0261,  ..., 0.0083, 0.0596, 0.0341],
         [0.0432, 0.0245, 0.0261,  ..., 0.9750, 0.8212, 0.0341],
         [0.7905, 0.9088, 0.8918,  ..., 0.0083, 0.0596, 0.8976]],
        [[0.0296, 0.0328, 0.9648,  ..., 0.0674, 0.5250, 0.0580],
         [0.0296, 0.0242, 0.0117,  ..., 0.0674, 0.0938, 0.0580],
         [0.9112, 0.0242, 0.0117,  ..., 0.7977, 0.0938, 0.8261],
         [0.0296, 0.9188, 0.0117,  ..., 0.0674, 0.2874, 0.0580]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0284, 0.0926, 0.9355,  ..., 0.0723, 0.8200, 0.0709],
         [0.0284, 0.0344, 0.0215,  ..., 0.0723, 0.0512, 0.0709],
         [0.9149, 0.0344, 0.0215,  ..., 0.7790, 0.0512, 0.7853],
         [0.0284, 0.8387, 0.0215,  ..., 0.0764, 0.0777, 0.0730]],
        [[0.0535, 0.8695, 0.0039,  ..., 0.0194, 0.8298, 0.0504],
         [0.0535, 0.0380, 0.0039,  ..., 0.0194, 0.0417, 0.0504],
         [0.8396, 0.0380, 0.0039,  ..., 0.0194, 0.0417, 0.8489],
         [0.0535, 0.0544, 0.9882,  ..., 0.9417, 0.0868, 0.0504]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 56:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:41,350 [Process: 0] Synchronize training processes
2024-08-18 15:11:41,351 [Process: 0] Evaluating...
2024-08-18 15:11:41,353 [Process: 0] EPOCH 57:
2024-08-18 15:11:41,354 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.9040, 0.8995, 0.5173,  ..., 0.0266, 0.0199, 0.0630],
         [0.0325, 0.0329, 0.0744,  ..., 0.0266, 0.0199, 0.0561],
         [0.0318, 0.0329, 0.0744,  ..., 0.9201, 0.9402, 0.0561],
         [0.0318, 0.0347, 0.3339,  ..., 0.0266, 0.0199, 0.8249]],
        [[0.0396, 0.0112, 0.9878,  ..., 0.0837, 0.1260, 0.0741],
         [0.0387, 0.0112, 0.0041,  ..., 0.0837, 0.0460, 0.0741],
         [0.8830, 0.0112, 0.0041,  ..., 0.6993, 0.0460, 0.7579],
         [0.0387, 0.9663, 0.0041,  ..., 0.1333, 0.7820, 0.0938]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0183, 0.1098, 0.1103,  ..., 0.0901, 0.9892, 0.0812],
         [0.0183, 0.0324, 0.1103,  ..., 0.0901, 0.0036, 0.0812],
         [0.9451, 0.0324, 0.4182,  ..., 0.6785, 0.0036, 0.7247],
         [0.0183, 0.8254, 0.3612,  ..., 0.1414, 0.0036, 0.1130]],
        [[0.0598, 0.9549, 0.0218,  ..., 0.0124, 0.9692, 0.0277],
         [0.0598, 0.0155, 0.0173,  ..., 0.0091, 0.0103, 0.0277],
         [0.8205, 0.0148, 0.0173,  ..., 0.0091, 0.0103, 0.9168],
         [0.0598, 0.0148, 0.9435,  ..., 0.9693, 0.0103, 0.0277]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 57:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.8618, 0.3063, 0.0114,  ..., 0.0234, 0.0418, 0.1417],
         [0.0401, 0.0850, 0.0114,  ..., 0.0234, 0.0418, 0.0812],
         [0.0401, 0.0850, 0.0114,  ..., 0.9298, 0.8746, 0.0916],
         [0.0579, 0.5238, 0.9659,  ..., 0.0234, 0.0418, 0.6855]],
        [[0.0167, 0.0167, 0.9465,  ..., 0.0452, 0.0442, 0.0747],
         [0.0167, 0.0167, 0.0178,  ..., 0.0452, 0.0442, 0.0747],
         [0.9500, 0.0167, 0.0178,  ..., 0.8643, 0.0442, 0.7635],
         [0.0167, 0.9499, 0.0178,  ..., 0.0452, 0.8675, 0.0870]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0426, 0.9090, 0.8615,  ..., 0.0614, 0.9488, 0.0522],
         [0.0426, 0.0266, 0.0447,  ..., 0.0614, 0.0174, 0.0522],
         [0.8722, 0.0254, 0.0447,  ..., 0.8158, 0.0169, 0.8434],
         [0.0426, 0.0390, 0.0492,  ..., 0.0614, 0.0169, 0.0522]],
        [[0.0383, 0.9463, 0.0015,  ..., 0.0023, 0.4039, 0.0358],
         [0.0383, 0.0179, 0.0015,  ..., 0.0023, 0.0444, 0.0358],
         [0.8850, 0.0179, 0.0015,  ..., 0.0023, 0.0444, 0.8926],
         [0.0383, 0.0179, 0.9955,  ..., 0.9932, 0.5074, 0.0358]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 58:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:42,490 [Process: 0] Synchronize training processes
2024-08-18 15:11:42,490 [Process: 0] Evaluating...
2024-08-18 15:11:42,492 [Process: 0] EPOCH 58:
2024-08-18 15:11:42,494 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:43,628 [Process: 0] Synchronize training processes
2024-08-18 15:11:43,629 [Process: 0] Evaluating...
2024-08-18 15:11:43,631 [Process: 0] EPOCH 59:
2024-08-18 15:11:43,633 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0493, 0.0375, 0.0430,  ..., 0.0321, 0.0506, 0.1068],
         [0.0324, 0.0375, 0.0430,  ..., 0.0321, 0.0506, 0.0934],
         [0.0324, 0.0375, 0.0430,  ..., 0.9036, 0.8482, 0.1554],
         [0.8858, 0.8875, 0.8709,  ..., 0.0321, 0.0506, 0.6443]],
        [[0.0189, 0.0367, 0.9726,  ..., 0.0521, 0.0290, 0.0502],
         [0.0189, 0.0367, 0.0091,  ..., 0.0521, 0.0290, 0.0502],
         [0.9432, 0.0367, 0.0091,  ..., 0.8438, 0.9130, 0.8493],
         [0.0189, 0.8898, 0.0091,  ..., 0.0521, 0.0290, 0.0502]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0470, 0.8279, 0.9769,  ..., 0.0437, 0.0119, 0.0405],
         [0.0470, 0.0392, 0.0080,  ..., 0.0437, 0.0119, 0.0405],
         [0.8591, 0.0392, 0.0076,  ..., 0.8689, 0.0119, 0.8786],
         [0.0470, 0.0937, 0.0076,  ..., 0.0437, 0.9644, 0.0405]],
        [[0.0690, 0.9257, 0.0048,  ..., 0.0409, 0.7029, 0.0479],
         [0.0690, 0.0248, 0.0048,  ..., 0.0208, 0.0454, 0.0479],
         [0.7850, 0.0248, 0.0048,  ..., 0.0208, 0.0454, 0.8564],
         [0.0771, 0.0248, 0.9857,  ..., 0.9175, 0.2063, 0.0479]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 59:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0258, 0.0336, 0.0910,  ..., 0.0224, 0.0455, 0.0885],
         [0.0242, 0.0336, 0.0910,  ..., 0.0224, 0.0455, 0.0820],
         [0.0242, 0.0336, 0.2032,  ..., 0.9328, 0.8634, 0.1245],
         [0.9257, 0.8993, 0.6148,  ..., 0.0224, 0.0455, 0.7050]],
        [[0.0213, 0.0387, 0.9542,  ..., 0.0428, 0.0305, 0.0400],
         [0.0213, 0.0387, 0.0153,  ..., 0.0428, 0.0305, 0.0400],
         [0.9360, 0.0387, 0.0153,  ..., 0.8717, 0.9086, 0.8800],
         [0.0213, 0.8840, 0.0153,  ..., 0.0428, 0.0305, 0.0400]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0458, 0.9679, 0.9163,  ..., 0.0657, 0.0743, 0.0451],
         [0.0458, 0.0107, 0.0279,  ..., 0.0657, 0.0743, 0.0451],
         [0.8626, 0.0107, 0.0279,  ..., 0.7961, 0.7572, 0.8647],
         [0.0458, 0.0107, 0.0279,  ..., 0.0725, 0.0942, 0.0451]],
        [[0.0806, 0.9461, 0.0102,  ..., 0.0035, 0.9028, 0.0382],
         [0.0806, 0.0180, 0.0102,  ..., 0.0035, 0.0276, 0.0382],
         [0.7231, 0.0180, 0.0102,  ..., 0.0035, 0.0276, 0.8854],
         [0.1156, 0.0180, 0.9695,  ..., 0.9894, 0.0419, 0.0382]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:44,767 [Process: 0] Synchronize training processes
2024-08-18 15:11:44,767 [Process: 0] Evaluating...
2024-08-18 15:11:44,769 [Process: 0] EPOCH 60:
2024-08-18 15:11:44,771 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:45,904 [Process: 0] Synchronize training processes
2024-08-18 15:11:45,904 [Process: 0] Evaluating...
2024-08-18 15:11:45,906 [Process: 0] EPOCH 61:
2024-08-18 15:11:45,908 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 60:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0137, 0.0340, 0.0524,  ..., 0.0167, 0.0278, 0.0263],
         [0.0137, 0.0340, 0.0524,  ..., 0.0167, 0.0278, 0.0263],
         [0.0137, 0.0340, 0.0524,  ..., 0.9500, 0.9166, 0.0263],
         [0.9590, 0.8979, 0.8427,  ..., 0.0167, 0.0278, 0.9212]],
        [[0.0359, 0.9273, 0.9318,  ..., 0.0547, 0.0285, 0.0982],
         [0.0359, 0.0242, 0.0227,  ..., 0.0547, 0.0285, 0.0982],
         [0.8924, 0.0242, 0.0227,  ..., 0.8360, 0.9145, 0.5701],
         [0.0359, 0.0242, 0.0227,  ..., 0.0547, 0.0285, 0.2336]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0562, 0.9599, 0.9628,  ..., 0.0398, 0.0531, 0.0506],
         [0.0562, 0.0134, 0.0124,  ..., 0.0398, 0.0531, 0.0506],
         [0.8315, 0.0134, 0.0124,  ..., 0.8807, 0.0811, 0.8483],
         [0.0562, 0.0134, 0.0124,  ..., 0.0398, 0.8126, 0.0506]],
        [[0.0450, 0.9580, 0.0015,  ..., 0.0116, 0.8210, 0.0375],
         [0.0450, 0.0124, 0.0015,  ..., 0.0116, 0.0358, 0.0375],
         [0.8651, 0.0124, 0.0015,  ..., 0.0116, 0.0358, 0.8874],
         [0.0450, 0.0173, 0.9954,  ..., 0.9653, 0.1073, 0.0375]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 61:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0129, 0.0263, 0.0145,  ..., 0.0385, 0.0385, 0.0305],
         [0.0129, 0.0263, 0.0150,  ..., 0.0385, 0.0385, 0.0305],
         [0.0129, 0.0263, 0.0145,  ..., 0.8846, 0.8844, 0.0305],
         [0.9612, 0.9210, 0.9559,  ..., 0.0385, 0.0385, 0.9086]],
        [[0.0334, 0.9504, 0.9776,  ..., 0.0275, 0.0375, 0.0331],
         [0.0334, 0.0165, 0.0075,  ..., 0.0275, 0.0375, 0.0331],
         [0.8998, 0.0165, 0.0075,  ..., 0.9175, 0.8874, 0.9006],
         [0.0334, 0.0165, 0.0075,  ..., 0.0275, 0.0375, 0.0331]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:47,045 [Process: 0] Synchronize training processes
2024-08-18 15:11:47,045 [Process: 0] Evaluating...
2024-08-18 15:11:47,049 [Process: 0] EPOCH 62:
2024-08-18 15:11:47,050 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:48,184 [Process: 0] Synchronize training processes
2024-08-18 15:11:48,184 [Process: 0] Evaluating...
2024-08-18 15:11:48,186 [Process: 0] EPOCH 63:
2024-08-18 15:11:48,188 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0591, 0.9470, 0.9630,  ..., 0.0611, 0.0620, 0.0567],
         [0.0591, 0.0177, 0.0123,  ..., 0.0611, 0.0218, 0.0567],
         [0.8227, 0.0177, 0.0123,  ..., 0.8120, 0.0218, 0.8299],
         [0.0591, 0.0177, 0.0123,  ..., 0.0659, 0.8943, 0.0567]],
        [[0.0618, 0.8541, 0.0030,  ..., 0.0195, 0.3170, 0.0360],
         [0.0618, 0.0320, 0.0030,  ..., 0.0177, 0.0325, 0.0360],
         [0.8145, 0.0320, 0.0030,  ..., 0.0177, 0.0325, 0.8920],
         [0.0618, 0.0819, 0.9911,  ..., 0.9450, 0.6180, 0.0360]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 62:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0240, 0.0165, 0.0037,  ..., 0.0335, 0.0417, 0.0353],
         [0.0240, 0.0137, 0.0037,  ..., 0.0335, 0.0417, 0.0353],
         [0.0240, 0.0137, 0.0037,  ..., 0.8996, 0.8750, 0.0353],
         [0.9280, 0.9562, 0.9888,  ..., 0.0335, 0.0417, 0.8942]],
        [[0.0301, 0.9500, 0.9595,  ..., 0.0391, 0.0320, 0.0299],
         [0.0301, 0.0167, 0.0135,  ..., 0.0391, 0.0320, 0.0299],
         [0.9097, 0.0167, 0.0135,  ..., 0.8828, 0.9041, 0.9103],
         [0.0301, 0.0167, 0.0135,  ..., 0.0391, 0.0320, 0.0299]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0481, 0.9747, 0.9569,  ..., 0.0765, 0.7127, 0.0535],
         [0.0481, 0.0084, 0.0144,  ..., 0.0765, 0.0507, 0.0535],
         [0.8556, 0.0084, 0.0144,  ..., 0.7025, 0.0507, 0.8396],
         [0.0481, 0.0084, 0.0144,  ..., 0.1445, 0.1859, 0.0535]],
        [[0.0360, 0.8494, 0.0039,  ..., 0.0109, 0.9388, 0.0327],
         [0.0360, 0.0382, 0.0039,  ..., 0.0099, 0.0154, 0.0327],
         [0.8921, 0.0382, 0.0039,  ..., 0.0099, 0.0154, 0.9018],
         [0.0360, 0.0742, 0.9882,  ..., 0.9694, 0.0304, 0.0327]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 63:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0296, 0.0438, 0.0490,  ..., 0.0168, 0.0161, 0.0310],
         [0.0296, 0.0365, 0.0490,  ..., 0.0168, 0.0161, 0.0310],
         [0.0296, 0.0365, 0.0490,  ..., 0.9497, 0.9518, 0.0310],
         [0.9113, 0.8832, 0.8530,  ..., 0.0168, 0.0161, 0.9070]],
        [[0.0215, 0.8211, 0.9781,  ..., 0.1405, 0.0235, 0.0398],
         [0.0215, 0.0552, 0.0073,  ..., 0.0834, 0.0235, 0.0398],
         [0.9355, 0.0685, 0.0073,  ..., 0.0915, 0.9296, 0.8807],
         [0.0215, 0.0552, 0.0073,  ..., 0.6846, 0.0235, 0.0398]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:49,324 [Process: 0] Synchronize training processes
2024-08-18 15:11:49,324 [Process: 0] Evaluating...
2024-08-18 15:11:49,326 [Process: 0] EPOCH 64:
2024-08-18 15:11:49,328 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0495, 0.5588, 0.8292,  ..., 0.0659, 0.8617, 0.0423],
         [0.0495, 0.0844, 0.0541,  ..., 0.0659, 0.0356, 0.0423],
         [0.8516, 0.0799, 0.0541,  ..., 0.7808, 0.0356, 0.8730],
         [0.0495, 0.2768, 0.0626,  ..., 0.0873, 0.0671, 0.0423]],
        [[0.0434, 0.8689, 0.0043,  ..., 0.0094, 0.9764, 0.0345],
         [0.0434, 0.0334, 0.0043,  ..., 0.0094, 0.0079, 0.0345],
         [0.8699, 0.0334, 0.0043,  ..., 0.0094, 0.0079, 0.8965],
         [0.0434, 0.0643, 0.9871,  ..., 0.9719, 0.0079, 0.0345]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 64:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0141, 0.0183, 0.0175,  ..., 0.0217, 0.0244, 0.0341],
         [0.0141, 0.0183, 0.0175,  ..., 0.0217, 0.0244, 0.0341],
         [0.0141, 0.0183, 0.0175,  ..., 0.9349, 0.9268, 0.0341],
         [0.9577, 0.9450, 0.9475,  ..., 0.0217, 0.0244, 0.8977]],
        [[0.0263, 0.9255, 0.9428,  ..., 0.0305, 0.8735, 0.0349],
         [0.0263, 0.0244, 0.0191,  ..., 0.0305, 0.0422, 0.0349],
         [0.9210, 0.0244, 0.0191,  ..., 0.9086, 0.0422, 0.8952],
         [0.0263, 0.0256, 0.0191,  ..., 0.0305, 0.0422, 0.0349]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0226, 0.0685, 0.9728,  ..., 0.0363, 0.9694, 0.0492],
         [0.0226, 0.0685, 0.0091,  ..., 0.0363, 0.0102, 0.0492],
         [0.9321, 0.7689, 0.0091,  ..., 0.0485, 0.0102, 0.8489],
         [0.0226, 0.0941, 0.0091,  ..., 0.8789, 0.0102, 0.0528]],
        [[0.0268, 0.1762, 0.0059,  ..., 0.0264, 0.4175, 0.0250],
         [0.0268, 0.0679, 0.0059,  ..., 0.0264, 0.0528, 0.0250],
         [0.9195, 0.0679, 0.0059,  ..., 0.0264, 0.0528, 0.9249],
         [0.0268, 0.6879, 0.9824,  ..., 0.9208, 0.4769, 0.0250]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 65:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:50,459 [Process: 0] Synchronize training processes
2024-08-18 15:11:50,460 [Process: 0] Evaluating...
2024-08-18 15:11:50,462 [Process: 0] EPOCH 65:
2024-08-18 15:11:50,463 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:51,596 [Process: 0] Synchronize training processes
2024-08-18 15:11:51,596 [Process: 0] Evaluating...
2024-08-18 15:11:51,598 [Process: 0] EPOCH 66:
2024-08-18 15:11:51,600 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0477, 0.0368, 0.0230,  ..., 0.0183, 0.0223, 0.0190],
         [0.0338, 0.0368, 0.0230,  ..., 0.0183, 0.0223, 0.0190],
         [0.0338, 0.0368, 0.0230,  ..., 0.9451, 0.9332, 0.0190],
         [0.8847, 0.8896, 0.9310,  ..., 0.0183, 0.0223, 0.9430]],
        [[0.0381, 0.9725, 0.9450,  ..., 0.0226, 0.0203, 0.0431],
         [0.0381, 0.0092, 0.0183,  ..., 0.0226, 0.0203, 0.0431],
         [0.8857, 0.0092, 0.0183,  ..., 0.9321, 0.9391, 0.8708],
         [0.0381, 0.0092, 0.0183,  ..., 0.0226, 0.0203, 0.0431]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0303, 0.0579, 0.9733,  ..., 0.0662, 0.0999, 0.0242],
         [0.0303, 0.0579, 0.0089,  ..., 0.0662, 0.0409, 0.0242],
         [0.9091, 0.8076, 0.0089,  ..., 0.2222, 0.0409, 0.9273],
         [0.0303, 0.0766, 0.0089,  ..., 0.6454, 0.8182, 0.0242]],
        [[0.0598, 0.9491, 0.0032,  ..., 0.0114, 0.9630, 0.0345],
         [0.0572, 0.0170, 0.0032,  ..., 0.0114, 0.0123, 0.0345],
         [0.8248, 0.0170, 0.0032,  ..., 0.0114, 0.0123, 0.8964],
         [0.0582, 0.0170, 0.9904,  ..., 0.9657, 0.0123, 0.0345]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 66:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.9161, 0.0295, 0.0211,  ..., 0.0226, 0.0307, 0.0235],
         [0.0244, 0.0295, 0.0211,  ..., 0.0226, 0.0307, 0.0235],
         [0.0244, 0.0295, 0.0211,  ..., 0.9323, 0.9079, 0.0235],
         [0.0351, 0.9116, 0.9368,  ..., 0.0226, 0.0307, 0.9296]],
        [[0.0234, 0.9744, 0.9933,  ..., 0.0210, 0.0283, 0.0265],
         [0.0234, 0.0085, 0.0022,  ..., 0.0210, 0.0283, 0.0265],
         [0.9299, 0.0085, 0.0022,  ..., 0.9370, 0.9150, 0.9206],
         [0.0234, 0.0085, 0.0022,  ..., 0.0210, 0.0283, 0.0265]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0358, 0.0356, 0.9623,  ..., 0.0514, 0.0141, 0.0335],
         [0.0358, 0.0356, 0.0126,  ..., 0.0514, 0.0141, 0.0335],
         [0.8890, 0.8931, 0.0126,  ..., 0.8320, 0.0141, 0.8996],
         [0.0394, 0.0356, 0.0126,  ..., 0.0652, 0.9576, 0.0335]],
        [[0.0680, 0.9471, 0.0073,  ..., 0.0072, 0.9494, 0.0339],
         [0.0602, 0.0176, 0.0073,  ..., 0.0072, 0.0169, 0.0339],
         [0.7997, 0.0176, 0.0073,  ..., 0.0072, 0.0169, 0.8982],
         [0.0721, 0.0176, 0.9782,  ..., 0.9783, 0.0169, 0.0339]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:52,731 [Process: 0] Synchronize training processes
2024-08-18 15:11:52,731 [Process: 0] Evaluating...
2024-08-18 15:11:52,733 [Process: 0] EPOCH 67:
2024-08-18 15:11:52,735 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:53,868 [Process: 0] Synchronize training processes
2024-08-18 15:11:53,868 [Process: 0] Evaluating...
2024-08-18 15:11:53,870 [Process: 0] EPOCH 68:
2024-08-18 15:11:53,871 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 67:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.9816, 0.0084, 0.0189,  ..., 0.0221, 0.0412, 0.0299],
         [0.0061, 0.0084, 0.0189,  ..., 0.0221, 0.0409, 0.0299],
         [0.0061, 0.0084, 0.0189,  ..., 0.9336, 0.8769, 0.0299],
         [0.0061, 0.9748, 0.9433,  ..., 0.0221, 0.0409, 0.9102]],
        [[0.0321, 0.9957, 0.9731,  ..., 0.0160, 0.0295, 0.0246],
         [0.0321, 0.0014, 0.0090,  ..., 0.0160, 0.0295, 0.0246],
         [0.9036, 0.0014, 0.0090,  ..., 0.9520, 0.9114, 0.9263],
         [0.0321, 0.0014, 0.0090,  ..., 0.0160, 0.0295, 0.0246]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0198, 0.0357, 0.9511,  ..., 0.0828, 0.0418, 0.0265],
         [0.0198, 0.0357, 0.0163,  ..., 0.0828, 0.0241, 0.0269],
         [0.9405, 0.8929, 0.0163,  ..., 0.6842, 0.0241, 0.9201],
         [0.0198, 0.0357, 0.0163,  ..., 0.1502, 0.9100, 0.0265]],
        [[0.0348, 0.9838, 0.0117,  ..., 0.0038, 0.9667, 0.0415],
         [0.0348, 0.0054, 0.0117,  ..., 0.0038, 0.0111, 0.0415],
         [0.8957, 0.0054, 0.0117,  ..., 0.0038, 0.0111, 0.8754],
         [0.0348, 0.0054, 0.9648,  ..., 0.9885, 0.0111, 0.0415]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 68:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.9334, 0.0216, 0.0108,  ..., 0.0105, 0.0262, 0.1270],
         [0.0185, 0.0216, 0.0108,  ..., 0.0105, 0.0262, 0.0735],
         [0.0185, 0.0216, 0.0108,  ..., 0.9685, 0.9213, 0.0837],
         [0.0295, 0.9351, 0.9677,  ..., 0.0105, 0.0262, 0.7158]],
        [[0.0168, 0.9569, 0.9872,  ..., 0.0170, 0.0239, 0.0408],
         [0.0168, 0.0144, 0.0043,  ..., 0.0170, 0.0239, 0.0408],
         [0.9495, 0.0144, 0.0043,  ..., 0.9491, 0.9283, 0.8777],
         [0.0168, 0.0144, 0.0043,  ..., 0.0170, 0.0239, 0.0408]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:55,006 [Process: 0] Synchronize training processes
2024-08-18 15:11:55,006 [Process: 0] Evaluating...
2024-08-18 15:11:55,008 [Process: 0] EPOCH 69:
2024-08-18 15:11:55,010 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:56,146 [Process: 0] Synchronize training processes
2024-08-18 15:11:56,147 [Process: 0] Evaluating...
2024-08-18 15:11:56,148 [Process: 0] EPOCH 70:
2024-08-18 15:11:56,150 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0160, 0.0345, 0.9172,  ..., 0.0372, 0.0160, 0.0316],
         [0.0160, 0.0345, 0.0276,  ..., 0.0372, 0.0143, 0.0316],
         [0.9520, 0.8964, 0.0276,  ..., 0.8884, 0.0143, 0.9053],
         [0.0160, 0.0345, 0.0276,  ..., 0.0372, 0.9554, 0.0316]],
        [[0.0503, 0.9359, 0.0062,  ..., 0.0041, 0.9721, 0.0437],
         [0.0484, 0.0214, 0.0062,  ..., 0.0041, 0.0093, 0.0437],
         [0.8530, 0.0214, 0.0062,  ..., 0.0041, 0.0093, 0.8688],
         [0.0484, 0.0214, 0.9815,  ..., 0.9877, 0.0093, 0.0437]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 69:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.8774, 0.0782, 0.0415,  ..., 0.0177, 0.0332, 0.0529],
         [0.0234, 0.0525, 0.0415,  ..., 0.0177, 0.0332, 0.0296],
         [0.0234, 0.0525, 0.0415,  ..., 0.9469, 0.9005, 0.0296],
         [0.0757, 0.8169, 0.8756,  ..., 0.0177, 0.0332, 0.8878]],
        [[0.0220, 0.9697, 0.9858,  ..., 0.0240, 0.0318, 0.0599],
         [0.0220, 0.0101, 0.0047,  ..., 0.0240, 0.0318, 0.0547],
         [0.9339, 0.0101, 0.0047,  ..., 0.9281, 0.9045, 0.8308],
         [0.0220, 0.0101, 0.0047,  ..., 0.0240, 0.0318, 0.0547]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0232, 0.0377, 0.9459,  ..., 0.0484, 0.0157, 0.0216],
         [0.0232, 0.0377, 0.0180,  ..., 0.0484, 0.0157, 0.0216],
         [0.9304, 0.8870, 0.0180,  ..., 0.8549, 0.0157, 0.9353],
         [0.0232, 0.0377, 0.0180,  ..., 0.0484, 0.9530, 0.0216]],
        [[0.0350, 0.9780, 0.0018,  ..., 0.0096, 0.3020, 0.0360],
         [0.0350, 0.0073, 0.0018,  ..., 0.0096, 0.0584, 0.0360],
         [0.8949, 0.0073, 0.0018,  ..., 0.0096, 0.0567, 0.8921],
         [0.0350, 0.0073, 0.9945,  ..., 0.9711, 0.5829, 0.0360]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 70:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.8945, 0.1442, 0.0337,  ..., 0.0172, 0.0244, 0.0144],
         [0.0270, 0.0768, 0.0337,  ..., 0.0172, 0.0244, 0.0144],
         [0.0270, 0.1048, 0.0373,  ..., 0.9485, 0.9269, 0.0144],
         [0.0515, 0.6742, 0.8952,  ..., 0.0172, 0.0244, 0.9567]],
        [[0.0141, 0.9437, 0.9800,  ..., 0.0234, 0.0378, 0.0615],
         [0.0141, 0.0188, 0.0067,  ..., 0.0234, 0.0378, 0.0615],
         [0.9576, 0.0188, 0.0067,  ..., 0.9297, 0.8867, 0.7866],
         [0.0141, 0.0188, 0.0067,  ..., 0.0234, 0.0378, 0.0904]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
2024-08-18 15:11:57,276 [Process: 0] Synchronize training processes
2024-08-18 15:11:57,276 [Process: 0] Evaluating...
2024-08-18 15:11:57,278 [Process: 0] EPOCH 71:
2024-08-18 15:11:57,280 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0339, 0.0400, 0.9457,  ..., 0.0513, 0.0343, 0.0199],
         [0.0339, 0.0400, 0.0181,  ..., 0.0513, 0.0249, 0.0199],
         [0.8983, 0.8799, 0.0181,  ..., 0.8418, 0.0228, 0.9403],
         [0.0339, 0.0400, 0.0181,  ..., 0.0555, 0.9181, 0.0199]],
        [[0.0351, 0.9748, 0.0316,  ..., 0.0141, 0.0244, 0.0344],
         [0.0351, 0.0084, 0.0316,  ..., 0.0141, 0.0233, 0.0344],
         [0.8947, 0.0084, 0.0326,  ..., 0.0141, 0.0223, 0.8967],
         [0.0351, 0.0084, 0.9042,  ..., 0.9577, 0.9300, 0.0344]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 71:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.9332, 0.0134, 0.0363,  ..., 0.0183, 0.0291, 0.0412],
         [0.0220, 0.0134, 0.0363,  ..., 0.0183, 0.0291, 0.0412],
         [0.0220, 0.0134, 0.0363,  ..., 0.9450, 0.9128, 0.0479],
         [0.0228, 0.9599, 0.8911,  ..., 0.0183, 0.0291, 0.8697]],
        [[0.0259, 0.9899, 0.9942,  ..., 0.0280, 0.0311, 0.0525],
         [0.0239, 0.0034, 0.0019,  ..., 0.0280, 0.0311, 0.0522],
         [0.9264, 0.0034, 0.0019,  ..., 0.9159, 0.9067, 0.8432],
         [0.0239, 0.0034, 0.0019,  ..., 0.0280, 0.0311, 0.0522]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0510, 0.0295, 0.9864,  ..., 0.0389, 0.0059, 0.0335],
         [0.0371, 0.0295, 0.0045,  ..., 0.0389, 0.0059, 0.0335],
         [0.8748, 0.9116, 0.0045,  ..., 0.8833, 0.0059, 0.8994],
         [0.0371, 0.0295, 0.0045,  ..., 0.0389, 0.9823, 0.0335]],
        [[0.0217, 0.9713, 0.0141,  ..., 0.0088, 0.0017, 0.0245],
         [0.0217, 0.0096, 0.0141,  ..., 0.0095, 0.0018, 0.0245],
         [0.9350, 0.0096, 0.0141,  ..., 0.0088, 0.0017, 0.9266],
         [0.0217, 0.0096, 0.9577,  ..., 0.9730, 0.9948, 0.0245]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 72:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:58,413 [Process: 0] Synchronize training processes
2024-08-18 15:11:58,413 [Process: 0] Evaluating...
2024-08-18 15:11:58,417 [Process: 0] EPOCH 72:
2024-08-18 15:11:58,418 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
2024-08-18 15:11:59,552 [Process: 0] Synchronize training processes
2024-08-18 15:11:59,553 [Process: 0] Evaluating...
2024-08-18 15:11:59,554 [Process: 0] EPOCH 73:
2024-08-18 15:11:59,556 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
Traceback (most recent call last):
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 37, in <module>
    main()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 367, in _run_hydra
    run_and_report(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 368, in <lambda>
    lambda: hydra.run(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/hydra.py", line 97, in run
    ret = run_job(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 31, in main
    trainer.train()
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 340, in train
    avg_loss = self.train_one_epoch(epoch)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 179, in train_one_epoch
    for i, batch in enumerate(self.train_loader):
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 634, in __next__
    data = self._next_data()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 678, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/dataset/dataset.py", line 189, in __getitem__
    yellow_indices = [i for i, color in enumerate(colors_ref) if is_yellow(color)]
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/dataset/dataset.py", line 189, in <listcomp>
    yellow_indices = [i for i, color in enumerate(colors_ref) if is_yellow(color)]
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/dataset/dataset.py", line 55, in is_yellow
    return (color[0] > 1 - tolerance and color[1] > 1 - tolerance and color[2] < tolerance)
KeyboardInterrupt
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.8312, 0.0420, 0.0323,  ..., 0.0194, 0.0340, 0.0545],
         [0.0383, 0.0420, 0.0323,  ..., 0.0194, 0.0340, 0.0494],
         [0.0383, 0.0420, 0.0323,  ..., 0.9418, 0.8979, 0.0494],
         [0.0922, 0.8739, 0.9030,  ..., 0.0194, 0.0340, 0.8468]],
        [[0.0577, 0.9674, 0.9852,  ..., 0.0236, 0.0303, 0.0861],
         [0.0306, 0.0109, 0.0049,  ..., 0.0236, 0.0303, 0.0861],
         [0.8811, 0.0109, 0.0049,  ..., 0.9291, 0.9091, 0.6281],
         [0.0306, 0.0109, 0.0049,  ..., 0.0236, 0.0303, 0.1997]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 16, 256])
----x_rgb shape: torch.Size([2, 16, 480, 640])
-----scene_pcs shape: torch.Size([2, 256, 3])
-----align shape: torch.Size([2, 16, 256])
------x shape: torch.Size([2, 35, 256])
------fusion x shape: torch.Size([2, 4, 256])
------target shape: torch.Size([2, 256, 4])
tensor([[[0.0528, 0.0317, 0.9333,  ..., 0.0302, 0.0026, 0.0234],
         [0.0397, 0.0317, 0.0222,  ..., 0.0302, 0.0026, 0.0234],
         [0.8677, 0.9048, 0.0222,  ..., 0.9095, 0.0026, 0.9298],
         [0.0397, 0.0317, 0.0222,  ..., 0.0302, 0.9923, 0.0234]],
        [[0.0311, 0.8025, 0.0282,  ..., 0.0067, 0.0060, 0.0304],
         [0.0311, 0.0306, 0.0282,  ..., 0.0067, 0.0060, 0.0304],
         [0.9066, 0.0306, 0.0282,  ..., 0.0067, 0.0060, 0.9089],
         [0.0311, 0.1363, 0.9155,  ..., 0.9800, 0.9821, 0.0304]]],
       device='cuda:0', grad_fn=<SoftmaxBackward0>)
outputs shape: torch.Size([2, 4, 256])
mask shape: torch.Size([2, 256, 4])
shape of inputs: torch.Size([2, 4, 256])
shape of targets: torch.Size([2, 4, 256])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 73:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True