2024-08-15 20:54:16,341 [Worker 0] Is distributed: False
2024-08-15 20:54:16,341 [Process: 0] Starting training
2024-08-15 20:54:16,341 [Process: 0] EPOCH 1:
2024-08-15 20:54:16,344 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
[Worker 0] Is distributed: False
[Process: 0] Starting training
[Process: 0] EPOCH 1:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
grid cord: tensor([[[-2559.8347,  1854.4487,  3187.8538,  ...,  1038.3606,
          -1532.3422,   783.1452],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2107.6875,
          -2692.9622,  1242.2626]],
        [[-2559.8347,  1854.4487,  3187.8538,  ...,  1504.2668,
          -1227.6593,  1699.4667],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2219.9727,
          -1630.5991, -1731.8934]]], device='cuda:0')
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
2024-08-15 20:54:18,707 [Process: 0] Synchronize training processes
2024-08-15 20:54:18,708 [Process: 0] Evaluating...
2024-08-15 20:54:18,709 [Process: 0] EPOCH 2:
2024-08-15 20:54:18,711 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
grid cord: tensor([[[-3514.9856,  2368.4207,  4148.8062,  ..., -3031.4087,
           2810.3335,  3706.6382],
         [-3478.6343,  2050.4504, -3478.6343,  ..., -2409.4805,
           -491.8777, -3242.2312]],
        [[-3514.9856,  2368.4207,  4148.8062,  ...,  2297.2087,
           3926.6338,  1557.9380],
         [-3478.6343,  2050.4504, -3478.6343,  ..., -1461.1514,
          -3415.0618,  1987.0272]]], device='cuda:0')
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 2:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
grid cord: tensor([[[-2559.8347,  1854.4487,  3187.8538,  ...,  1038.3606,
          -1532.3422,   783.1452],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2107.6875,
          -2692.9622,  1242.2626]],
        [[-2559.8347,  1854.4487,  3187.8538,  ...,  1504.2668,
          -1227.6593,  1699.4667],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2219.9727,
          -1630.5991, -1731.8934]]], device='cuda:0')
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
------list
["the orange lamp is on the normal eraser's Front side", "the normal printer is on the normal plant's Front Right side"]
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
grid cord: tensor([[[-3514.9856,  2368.4207,  4148.8062,  ..., -3031.4087,
           2810.3335,  3706.6382],
         [-3478.6343,  2050.4504, -3478.6343,  ..., -2409.4805,
           -491.8777, -3242.2312]],
        [[-3514.9856,  2368.4207,  4148.8062,  ...,  2297.2087,
           3926.6338,  1557.9380],
         [-3478.6343,  2050.4504, -3478.6343,  ..., -1461.1514,
          -3415.0618,  1987.0272]]], device='cuda:0')
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
[Process: 0] Synchronize training processes
[Process: 0] Evaluating...
[Process: 0] EPOCH 3:
[Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
------list
['To Front of the normal monitor, there is a the normal keyboard', 'the blue phone is at the Back of the normal phone']
<class 'str'>
<class 'str'>
----x_geo shape: torch.Size([2, 4, 4096])
----x_rgb shape: torch.Size([2, 1, 480, 640])
-----scene_pcs shape: torch.Size([2, 4096, 3])
grid cord: tensor([[[-2559.8347,  1854.4487,  3187.8538,  ...,  1038.3606,
          -1532.3422,   783.1452],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2107.6875,
          -2692.9622,  1242.2626]],
        [[-2559.8347,  1854.4487,  3187.8538,  ...,  1504.2668,
          -1227.6593,  1699.4667],
         [-2742.5430,  1406.1896, -2742.5430,  ..., -2219.9727,
          -1630.5991, -1731.8934]]], device='cuda:0')
-----merge shape: torch.Size([2, 4096, 1])
shape of inputs: torch.Size([2, 480, 640])
shape of targets: torch.Size([2, 480, 640])
2024-08-15 20:54:20,453 [Process: 0] Synchronize training processes
2024-08-15 20:54:20,453 [Process: 0] Evaluating...
2024-08-15 20:54:20,454 [Process: 0] EPOCH 3:
2024-08-15 20:54:20,456 [Worker 0] Loss fn: soft_dice - SoftDiceLoss(), Rank 0 - True
Traceback (most recent call last):
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 37, in <module>
    main()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 367, in _run_hydra
    run_and_report(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/utils.py", line 368, in <lambda>
    lambda: hydra.run(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/_internal/hydra.py", line 97, in run
    ret = run_job(
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/run.py", line 31, in main
    trainer.train()
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 339, in train
    avg_loss = self.train_one_epoch(epoch)
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/trainer/trainer.py", line 179, in train_one_epoch
    for i, batch in enumerate(self.train_loader):
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 634, in __next__
    data = self._next_data()
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 678, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/stud/zhoy/anaconda3/envs/o2o/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/stud/zhoy/MasterThesis_zhoy/GeoL_net/dataset/dataset.py", line 116, in __getitem__
    fps_indices_scene_np = fps_indices_scene.squeeze(0).cpu().numpy()
KeyboardInterrupt